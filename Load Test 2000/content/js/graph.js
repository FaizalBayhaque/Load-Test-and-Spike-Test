/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 362.0, "minX": 0.0, "maxY": 5848.0, "series": [{"data": [[0.0, 364.0], [0.1, 364.0], [0.2, 365.0], [0.3, 365.0], [0.4, 366.0], [0.5, 366.0], [0.6, 366.0], [0.7, 367.0], [0.8, 367.0], [0.9, 367.0], [1.0, 367.0], [1.1, 368.0], [1.2, 368.0], [1.3, 368.0], [1.4, 368.0], [1.5, 368.0], [1.6, 369.0], [1.7, 369.0], [1.8, 369.0], [1.9, 369.0], [2.0, 369.0], [2.1, 369.0], [2.2, 369.0], [2.3, 369.0], [2.4, 370.0], [2.5, 370.0], [2.6, 370.0], [2.7, 370.0], [2.8, 370.0], [2.9, 370.0], [3.0, 370.0], [3.1, 370.0], [3.2, 370.0], [3.3, 370.0], [3.4, 371.0], [3.5, 371.0], [3.6, 371.0], [3.7, 371.0], [3.8, 371.0], [3.9, 371.0], [4.0, 371.0], [4.1, 372.0], [4.2, 373.0], [4.3, 373.0], [4.4, 373.0], [4.5, 373.0], [4.6, 373.0], [4.7, 373.0], [4.8, 373.0], [4.9, 374.0], [5.0, 374.0], [5.1, 374.0], [5.2, 374.0], [5.3, 374.0], [5.4, 374.0], [5.5, 374.0], [5.6, 375.0], [5.7, 375.0], [5.8, 375.0], [5.9, 375.0], [6.0, 375.0], [6.1, 375.0], [6.2, 375.0], [6.3, 376.0], [6.4, 376.0], [6.5, 376.0], [6.6, 376.0], [6.7, 376.0], [6.8, 376.0], [6.9, 377.0], [7.0, 377.0], [7.1, 377.0], [7.2, 377.0], [7.3, 377.0], [7.4, 378.0], [7.5, 378.0], [7.6, 378.0], [7.7, 378.0], [7.8, 378.0], [7.9, 379.0], [8.0, 379.0], [8.1, 379.0], [8.2, 379.0], [8.3, 379.0], [8.4, 379.0], [8.5, 379.0], [8.6, 379.0], [8.7, 379.0], [8.8, 380.0], [8.9, 380.0], [9.0, 380.0], [9.1, 380.0], [9.2, 380.0], [9.3, 380.0], [9.4, 381.0], [9.5, 381.0], [9.6, 381.0], [9.7, 381.0], [9.8, 382.0], [9.9, 382.0], [10.0, 382.0], [10.1, 382.0], [10.2, 382.0], [10.3, 383.0], [10.4, 383.0], [10.5, 383.0], [10.6, 384.0], [10.7, 384.0], [10.8, 384.0], [10.9, 384.0], [11.0, 384.0], [11.1, 384.0], [11.2, 384.0], [11.3, 384.0], [11.4, 384.0], [11.5, 384.0], [11.6, 384.0], [11.7, 384.0], [11.8, 384.0], [11.9, 384.0], [12.0, 384.0], [12.1, 384.0], [12.2, 384.0], [12.3, 385.0], [12.4, 385.0], [12.5, 385.0], [12.6, 385.0], [12.7, 385.0], [12.8, 385.0], [12.9, 385.0], [13.0, 385.0], [13.1, 385.0], [13.2, 385.0], [13.3, 386.0], [13.4, 386.0], [13.5, 386.0], [13.6, 386.0], [13.7, 386.0], [13.8, 386.0], [13.9, 386.0], [14.0, 386.0], [14.1, 387.0], [14.2, 387.0], [14.3, 387.0], [14.4, 387.0], [14.5, 387.0], [14.6, 388.0], [14.7, 388.0], [14.8, 388.0], [14.9, 388.0], [15.0, 388.0], [15.1, 388.0], [15.2, 389.0], [15.3, 389.0], [15.4, 389.0], [15.5, 389.0], [15.6, 389.0], [15.7, 390.0], [15.8, 390.0], [15.9, 390.0], [16.0, 391.0], [16.1, 391.0], [16.2, 391.0], [16.3, 391.0], [16.4, 391.0], [16.5, 391.0], [16.6, 391.0], [16.7, 391.0], [16.8, 392.0], [16.9, 392.0], [17.0, 392.0], [17.1, 392.0], [17.2, 392.0], [17.3, 393.0], [17.4, 393.0], [17.5, 393.0], [17.6, 393.0], [17.7, 394.0], [17.8, 394.0], [17.9, 394.0], [18.0, 394.0], [18.1, 394.0], [18.2, 394.0], [18.3, 395.0], [18.4, 395.0], [18.5, 395.0], [18.6, 395.0], [18.7, 395.0], [18.8, 395.0], [18.9, 395.0], [19.0, 395.0], [19.1, 395.0], [19.2, 396.0], [19.3, 396.0], [19.4, 396.0], [19.5, 396.0], [19.6, 396.0], [19.7, 397.0], [19.8, 398.0], [19.9, 398.0], [20.0, 398.0], [20.1, 398.0], [20.2, 398.0], [20.3, 398.0], [20.4, 399.0], [20.5, 399.0], [20.6, 399.0], [20.7, 399.0], [20.8, 399.0], [20.9, 399.0], [21.0, 400.0], [21.1, 400.0], [21.2, 400.0], [21.3, 400.0], [21.4, 401.0], [21.5, 401.0], [21.6, 401.0], [21.7, 401.0], [21.8, 401.0], [21.9, 401.0], [22.0, 402.0], [22.1, 402.0], [22.2, 402.0], [22.3, 402.0], [22.4, 402.0], [22.5, 402.0], [22.6, 402.0], [22.7, 403.0], [22.8, 403.0], [22.9, 403.0], [23.0, 403.0], [23.1, 403.0], [23.2, 403.0], [23.3, 403.0], [23.4, 404.0], [23.5, 404.0], [23.6, 404.0], [23.7, 404.0], [23.8, 404.0], [23.9, 404.0], [24.0, 404.0], [24.1, 404.0], [24.2, 405.0], [24.3, 405.0], [24.4, 405.0], [24.5, 405.0], [24.6, 405.0], [24.7, 406.0], [24.8, 406.0], [24.9, 407.0], [25.0, 407.0], [25.1, 407.0], [25.2, 407.0], [25.3, 407.0], [25.4, 407.0], [25.5, 407.0], [25.6, 408.0], [25.7, 408.0], [25.8, 408.0], [25.9, 408.0], [26.0, 408.0], [26.1, 408.0], [26.2, 409.0], [26.3, 409.0], [26.4, 409.0], [26.5, 409.0], [26.6, 409.0], [26.7, 412.0], [26.8, 412.0], [26.9, 412.0], [27.0, 412.0], [27.1, 413.0], [27.2, 413.0], [27.3, 413.0], [27.4, 413.0], [27.5, 413.0], [27.6, 413.0], [27.7, 413.0], [27.8, 413.0], [27.9, 414.0], [28.0, 414.0], [28.1, 414.0], [28.2, 414.0], [28.3, 414.0], [28.4, 415.0], [28.5, 415.0], [28.6, 415.0], [28.7, 415.0], [28.8, 415.0], [28.9, 416.0], [29.0, 416.0], [29.1, 416.0], [29.2, 416.0], [29.3, 416.0], [29.4, 416.0], [29.5, 416.0], [29.6, 416.0], [29.7, 416.0], [29.8, 416.0], [29.9, 417.0], [30.0, 417.0], [30.1, 417.0], [30.2, 417.0], [30.3, 419.0], [30.4, 419.0], [30.5, 419.0], [30.6, 419.0], [30.7, 419.0], [30.8, 420.0], [30.9, 421.0], [31.0, 421.0], [31.1, 421.0], [31.2, 421.0], [31.3, 422.0], [31.4, 422.0], [31.5, 422.0], [31.6, 422.0], [31.7, 422.0], [31.8, 422.0], [31.9, 422.0], [32.0, 422.0], [32.1, 423.0], [32.2, 423.0], [32.3, 423.0], [32.4, 423.0], [32.5, 423.0], [32.6, 423.0], [32.7, 423.0], [32.8, 424.0], [32.9, 424.0], [33.0, 424.0], [33.1, 424.0], [33.2, 424.0], [33.3, 425.0], [33.4, 425.0], [33.5, 425.0], [33.6, 425.0], [33.7, 425.0], [33.8, 426.0], [33.9, 426.0], [34.0, 426.0], [34.1, 426.0], [34.2, 426.0], [34.3, 427.0], [34.4, 427.0], [34.5, 427.0], [34.6, 427.0], [34.7, 427.0], [34.8, 427.0], [34.9, 427.0], [35.0, 427.0], [35.1, 427.0], [35.2, 427.0], [35.3, 427.0], [35.4, 427.0], [35.5, 428.0], [35.6, 428.0], [35.7, 428.0], [35.8, 429.0], [35.9, 429.0], [36.0, 429.0], [36.1, 430.0], [36.2, 430.0], [36.3, 430.0], [36.4, 430.0], [36.5, 430.0], [36.6, 431.0], [36.7, 431.0], [36.8, 431.0], [36.9, 431.0], [37.0, 431.0], [37.1, 431.0], [37.2, 431.0], [37.3, 432.0], [37.4, 432.0], [37.5, 433.0], [37.6, 433.0], [37.7, 433.0], [37.8, 434.0], [37.9, 434.0], [38.0, 434.0], [38.1, 435.0], [38.2, 435.0], [38.3, 436.0], [38.4, 436.0], [38.5, 436.0], [38.6, 436.0], [38.7, 436.0], [38.8, 436.0], [38.9, 436.0], [39.0, 437.0], [39.1, 437.0], [39.2, 437.0], [39.3, 438.0], [39.4, 438.0], [39.5, 438.0], [39.6, 439.0], [39.7, 439.0], [39.8, 439.0], [39.9, 439.0], [40.0, 440.0], [40.1, 440.0], [40.2, 440.0], [40.3, 440.0], [40.4, 440.0], [40.5, 441.0], [40.6, 441.0], [40.7, 441.0], [40.8, 443.0], [40.9, 443.0], [41.0, 444.0], [41.1, 444.0], [41.2, 444.0], [41.3, 445.0], [41.4, 445.0], [41.5, 445.0], [41.6, 445.0], [41.7, 446.0], [41.8, 446.0], [41.9, 446.0], [42.0, 446.0], [42.1, 446.0], [42.2, 446.0], [42.3, 446.0], [42.4, 446.0], [42.5, 446.0], [42.6, 446.0], [42.7, 446.0], [42.8, 447.0], [42.9, 447.0], [43.0, 448.0], [43.1, 448.0], [43.2, 448.0], [43.3, 449.0], [43.4, 449.0], [43.5, 449.0], [43.6, 449.0], [43.7, 450.0], [43.8, 450.0], [43.9, 450.0], [44.0, 451.0], [44.1, 451.0], [44.2, 452.0], [44.3, 452.0], [44.4, 452.0], [44.5, 453.0], [44.6, 453.0], [44.7, 453.0], [44.8, 453.0], [44.9, 453.0], [45.0, 454.0], [45.1, 454.0], [45.2, 455.0], [45.3, 455.0], [45.4, 456.0], [45.5, 456.0], [45.6, 456.0], [45.7, 456.0], [45.8, 456.0], [45.9, 456.0], [46.0, 457.0], [46.1, 457.0], [46.2, 460.0], [46.3, 460.0], [46.4, 460.0], [46.5, 460.0], [46.6, 460.0], [46.7, 461.0], [46.8, 461.0], [46.9, 462.0], [47.0, 462.0], [47.1, 462.0], [47.2, 463.0], [47.3, 463.0], [47.4, 463.0], [47.5, 463.0], [47.6, 463.0], [47.7, 465.0], [47.8, 465.0], [47.9, 465.0], [48.0, 469.0], [48.1, 469.0], [48.2, 474.0], [48.3, 474.0], [48.4, 475.0], [48.5, 478.0], [48.6, 478.0], [48.7, 478.0], [48.8, 478.0], [48.9, 479.0], [49.0, 480.0], [49.1, 480.0], [49.2, 481.0], [49.3, 481.0], [49.4, 484.0], [49.5, 486.0], [49.6, 486.0], [49.7, 488.0], [49.8, 488.0], [49.9, 493.0], [50.0, 493.0], [50.1, 495.0], [50.2, 495.0], [50.3, 495.0], [50.4, 496.0], [50.5, 496.0], [50.6, 501.0], [50.7, 502.0], [50.8, 502.0], [50.9, 504.0], [51.0, 504.0], [51.1, 506.0], [51.2, 507.0], [51.3, 507.0], [51.4, 510.0], [51.5, 510.0], [51.6, 510.0], [51.7, 511.0], [51.8, 511.0], [51.9, 512.0], [52.0, 512.0], [52.1, 515.0], [52.2, 516.0], [52.3, 516.0], [52.4, 516.0], [52.5, 516.0], [52.6, 521.0], [52.7, 521.0], [52.8, 521.0], [52.9, 523.0], [53.0, 523.0], [53.1, 523.0], [53.2, 523.0], [53.3, 523.0], [53.4, 524.0], [53.5, 524.0], [53.6, 526.0], [53.7, 527.0], [53.8, 527.0], [53.9, 533.0], [54.0, 533.0], [54.1, 535.0], [54.2, 536.0], [54.3, 536.0], [54.4, 538.0], [54.5, 538.0], [54.6, 540.0], [54.7, 542.0], [54.8, 542.0], [54.9, 546.0], [55.0, 546.0], [55.1, 552.0], [55.2, 552.0], [55.3, 554.0], [55.4, 554.0], [55.5, 554.0], [55.6, 555.0], [55.7, 555.0], [55.8, 555.0], [55.9, 556.0], [56.0, 556.0], [56.1, 557.0], [56.2, 557.0], [56.3, 559.0], [56.4, 559.0], [56.5, 559.0], [56.6, 559.0], [56.7, 559.0], [56.8, 562.0], [56.9, 562.0], [57.0, 562.0], [57.1, 565.0], [57.2, 565.0], [57.3, 573.0], [57.4, 583.0], [57.5, 583.0], [57.6, 588.0], [57.7, 588.0], [57.8, 589.0], [57.9, 590.0], [58.0, 590.0], [58.1, 595.0], [58.2, 595.0], [58.3, 603.0], [58.4, 604.0], [58.5, 604.0], [58.6, 605.0], [58.7, 605.0], [58.8, 605.0], [58.9, 617.0], [59.0, 617.0], [59.1, 618.0], [59.2, 618.0], [59.3, 618.0], [59.4, 621.0], [59.5, 621.0], [59.6, 629.0], [59.7, 629.0], [59.8, 631.0], [59.9, 638.0], [60.0, 638.0], [60.1, 648.0], [60.2, 648.0], [60.3, 656.0], [60.4, 656.0], [60.5, 656.0], [60.6, 666.0], [60.7, 666.0], [60.8, 669.0], [60.9, 669.0], [61.0, 673.0], [61.1, 683.0], [61.2, 683.0], [61.3, 697.0], [61.4, 697.0], [61.5, 708.0], [61.6, 712.0], [61.7, 712.0], [61.8, 714.0], [61.9, 714.0], [62.0, 738.0], [62.1, 742.0], [62.2, 742.0], [62.3, 745.0], [62.4, 745.0], [62.5, 750.0], [62.6, 763.0], [62.7, 763.0], [62.8, 766.0], [62.9, 766.0], [63.0, 767.0], [63.1, 779.0], [63.2, 779.0], [63.3, 791.0], [63.4, 791.0], [63.5, 792.0], [63.6, 792.0], [63.7, 792.0], [63.8, 795.0], [63.9, 795.0], [64.0, 795.0], [64.1, 797.0], [64.2, 797.0], [64.3, 798.0], [64.4, 798.0], [64.5, 799.0], [64.6, 802.0], [64.7, 802.0], [64.8, 810.0], [64.9, 810.0], [65.0, 811.0], [65.1, 811.0], [65.2, 815.0], [65.3, 827.0], [65.4, 827.0], [65.5, 831.0], [65.6, 831.0], [65.7, 833.0], [65.8, 834.0], [65.9, 834.0], [66.0, 845.0], [66.1, 845.0], [66.2, 845.0], [66.3, 846.0], [66.4, 846.0], [66.5, 849.0], [66.6, 849.0], [66.7, 850.0], [66.8, 851.0], [66.9, 851.0], [67.0, 870.0], [67.1, 870.0], [67.2, 871.0], [67.3, 878.0], [67.4, 878.0], [67.5, 880.0], [67.6, 880.0], [67.7, 891.0], [67.8, 895.0], [67.9, 895.0], [68.0, 915.0], [68.1, 915.0], [68.2, 922.0], [68.3, 927.0], [68.4, 927.0], [68.5, 930.0], [68.6, 930.0], [68.7, 930.0], [68.8, 936.0], [68.9, 936.0], [69.0, 937.0], [69.1, 937.0], [69.2, 943.0], [69.3, 944.0], [69.4, 944.0], [69.5, 946.0], [69.6, 946.0], [69.7, 947.0], [69.8, 947.0], [69.9, 947.0], [70.0, 979.0], [70.1, 979.0], [70.2, 986.0], [70.3, 986.0], [70.4, 987.0], [70.5, 993.0], [70.6, 993.0], [70.7, 1005.0], [70.8, 1005.0], [70.9, 1011.0], [71.0, 1012.0], [71.1, 1012.0], [71.2, 1018.0], [71.3, 1018.0], [71.4, 1022.0], [71.5, 1024.0], [71.6, 1024.0], [71.7, 1024.0], [71.8, 1024.0], [71.9, 1028.0], [72.0, 1030.0], [72.1, 1030.0], [72.2, 1032.0], [72.3, 1032.0], [72.4, 1033.0], [72.5, 1035.0], [72.6, 1035.0], [72.7, 1040.0], [72.8, 1040.0], [72.9, 1040.0], [73.0, 1041.0], [73.1, 1041.0], [73.2, 1043.0], [73.3, 1043.0], [73.4, 1044.0], [73.5, 1046.0], [73.6, 1046.0], [73.7, 1048.0], [73.8, 1048.0], [73.9, 1048.0], [74.0, 1048.0], [74.1, 1048.0], [74.2, 1049.0], [74.3, 1049.0], [74.4, 1050.0], [74.5, 1052.0], [74.6, 1052.0], [74.7, 1054.0], [74.8, 1054.0], [74.9, 1056.0], [75.0, 1057.0], [75.1, 1057.0], [75.2, 1058.0], [75.3, 1058.0], [75.4, 1062.0], [75.5, 1062.0], [75.6, 1062.0], [75.7, 1063.0], [75.8, 1063.0], [75.9, 1063.0], [76.0, 1063.0], [76.1, 1064.0], [76.2, 1064.0], [76.3, 1064.0], [76.4, 1065.0], [76.5, 1065.0], [76.6, 1066.0], [76.7, 1066.0], [76.8, 1066.0], [76.9, 1068.0], [77.0, 1068.0], [77.1, 1068.0], [77.2, 1072.0], [77.3, 1072.0], [77.4, 1073.0], [77.5, 1073.0], [77.6, 1073.0], [77.7, 1075.0], [77.8, 1075.0], [77.9, 1078.0], [78.0, 1078.0], [78.1, 1080.0], [78.2, 1080.0], [78.3, 1080.0], [78.4, 1083.0], [78.5, 1083.0], [78.6, 1084.0], [78.7, 1087.0], [78.8, 1087.0], [78.9, 1088.0], [79.0, 1088.0], [79.1, 1088.0], [79.2, 1091.0], [79.3, 1091.0], [79.4, 1091.0], [79.5, 1091.0], [79.6, 1091.0], [79.7, 1094.0], [79.8, 1094.0], [79.9, 1096.0], [80.0, 1096.0], [80.1, 1097.0], [80.2, 1097.0], [80.3, 1101.0], [80.4, 1102.0], [80.5, 1102.0], [80.6, 1105.0], [80.7, 1105.0], [80.8, 1106.0], [80.9, 1109.0], [81.0, 1109.0], [81.1, 1109.0], [81.2, 1109.0], [81.3, 1109.0], [81.4, 1110.0], [81.5, 1110.0], [81.6, 1111.0], [81.7, 1111.0], [81.8, 1113.0], [81.9, 1113.0], [82.0, 1113.0], [82.1, 1114.0], [82.2, 1114.0], [82.3, 1118.0], [82.4, 1121.0], [82.5, 1121.0], [82.6, 1123.0], [82.7, 1123.0], [82.8, 1131.0], [82.9, 1131.0], [83.0, 1131.0], [83.1, 1132.0], [83.2, 1132.0], [83.3, 1133.0], [83.4, 1135.0], [83.5, 1135.0], [83.6, 1141.0], [83.7, 1141.0], [83.8, 1144.0], [83.9, 1146.0], [84.0, 1146.0], [84.1, 1146.0], [84.2, 1146.0], [84.3, 1150.0], [84.4, 1150.0], [84.5, 1150.0], [84.6, 1152.0], [84.7, 1152.0], [84.8, 1155.0], [84.9, 1157.0], [85.0, 1157.0], [85.1, 1158.0], [85.2, 1158.0], [85.3, 1160.0], [85.4, 1160.0], [85.5, 1164.0], [85.6, 1164.0], [85.7, 1164.0], [85.8, 1165.0], [85.9, 1165.0], [86.0, 1166.0], [86.1, 1167.0], [86.2, 1167.0], [86.3, 1180.0], [86.4, 1180.0], [86.5, 1184.0], [86.6, 1186.0], [86.7, 1186.0], [86.8, 1187.0], [86.9, 1187.0], [87.0, 1190.0], [87.1, 1190.0], [87.2, 1190.0], [87.3, 1191.0], [87.4, 1191.0], [87.5, 1204.0], [87.6, 1208.0], [87.7, 1208.0], [87.8, 1213.0], [87.9, 1213.0], [88.0, 1216.0], [88.1, 1217.0], [88.2, 1217.0], [88.3, 1219.0], [88.4, 1219.0], [88.5, 1223.0], [88.6, 1223.0], [88.7, 1223.0], [88.8, 1225.0], [88.9, 1225.0], [89.0, 1229.0], [89.1, 1234.0], [89.2, 1234.0], [89.3, 1249.0], [89.4, 1249.0], [89.5, 1251.0], [89.6, 1255.0], [89.7, 1255.0], [89.8, 1265.0], [89.9, 1265.0], [90.0, 1273.0], [90.1, 1273.0], [90.2, 1276.0], [90.3, 1292.0], [90.4, 1292.0], [90.5, 1299.0], [90.6, 1299.0], [90.7, 1303.0], [90.8, 1306.0], [90.9, 1306.0], [91.0, 1328.0], [91.1, 1328.0], [91.2, 1346.0], [91.3, 1370.0], [91.4, 1370.0], [91.5, 1371.0], [91.6, 1371.0], [91.7, 1375.0], [91.8, 1390.0], [91.9, 1390.0], [92.0, 1409.0], [92.1, 1409.0], [92.2, 1412.0], [92.3, 1414.0], [92.4, 1414.0], [92.5, 1448.0], [92.6, 1448.0], [92.7, 1454.0], [92.8, 1476.0], [92.9, 1476.0], [93.0, 1491.0], [93.1, 1491.0], [93.2, 1494.0], [93.3, 1511.0], [93.4, 1511.0], [93.5, 1557.0], [93.6, 1557.0], [93.7, 1560.0], [93.8, 1577.0], [93.9, 1577.0], [94.0, 1578.0], [94.1, 1578.0], [94.2, 1607.0], [94.3, 1630.0], [94.4, 1630.0], [94.5, 1632.0], [94.6, 1632.0], [94.7, 1671.0], [94.8, 1676.0], [94.9, 1676.0], [95.0, 1690.0], [95.1, 1690.0], [95.2, 1706.0], [95.3, 1706.0], [95.4, 1722.0], [95.5, 1805.0], [95.6, 1805.0], [95.7, 1831.0], [95.8, 1831.0], [95.9, 1875.0], [96.0, 1905.0], [96.1, 1905.0], [96.2, 1933.0], [96.3, 1933.0], [96.4, 1975.0], [96.5, 1996.0], [96.6, 1996.0], [96.7, 2000.0], [96.8, 2000.0], [96.9, 2000.0], [97.0, 2002.0], [97.1, 2002.0], [97.2, 2014.0], [97.3, 2014.0], [97.4, 2024.0], [97.5, 2044.0], [97.6, 2044.0], [97.7, 2108.0], [97.8, 2108.0], [97.9, 2110.0], [98.0, 2128.0], [98.1, 2128.0], [98.2, 2150.0], [98.3, 2150.0], [98.4, 2214.0], [98.5, 2224.0], [98.6, 2224.0], [98.7, 2347.0], [98.8, 2347.0], [98.9, 2603.0], [99.0, 2948.0], [99.1, 2948.0], [99.2, 3178.0], [99.3, 3178.0], [99.4, 3504.0], [99.5, 3608.0], [99.6, 3608.0], [99.7, 3929.0], [99.8, 3929.0], [99.9, 3937.0]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[0.0, 410.0], [0.1, 410.0], [0.2, 410.0], [0.3, 413.0], [0.4, 413.0], [0.5, 416.0], [0.6, 416.0], [0.7, 416.0], [0.8, 416.0], [0.9, 416.0], [1.0, 417.0], [1.1, 417.0], [1.2, 417.0], [1.3, 417.0], [1.4, 417.0], [1.5, 417.0], [1.6, 417.0], [1.7, 417.0], [1.8, 417.0], [1.9, 417.0], [2.0, 418.0], [2.1, 418.0], [2.2, 418.0], [2.3, 418.0], [2.4, 418.0], [2.5, 419.0], [2.6, 419.0], [2.7, 419.0], [2.8, 419.0], [2.9, 419.0], [3.0, 420.0], [3.1, 420.0], [3.2, 420.0], [3.3, 421.0], [3.4, 421.0], [3.5, 421.0], [3.6, 421.0], [3.7, 421.0], [3.8, 424.0], [3.9, 424.0], [4.0, 425.0], [4.1, 425.0], [4.2, 425.0], [4.3, 426.0], [4.4, 426.0], [4.5, 426.0], [4.6, 426.0], [4.7, 426.0], [4.8, 427.0], [4.9, 427.0], [5.0, 428.0], [5.1, 428.0], [5.2, 428.0], [5.3, 429.0], [5.4, 429.0], [5.5, 430.0], [5.6, 430.0], [5.7, 430.0], [5.8, 430.0], [5.9, 430.0], [6.0, 430.0], [6.1, 430.0], [6.2, 430.0], [6.3, 430.0], [6.4, 430.0], [6.5, 430.0], [6.6, 430.0], [6.7, 430.0], [6.8, 431.0], [6.9, 431.0], [7.0, 431.0], [7.1, 431.0], [7.2, 431.0], [7.3, 431.0], [7.4, 431.0], [7.5, 431.0], [7.6, 431.0], [7.7, 431.0], [7.8, 432.0], [7.9, 432.0], [8.0, 432.0], [8.1, 432.0], [8.2, 432.0], [8.3, 434.0], [8.4, 434.0], [8.5, 436.0], [8.6, 436.0], [8.7, 436.0], [8.8, 436.0], [8.9, 436.0], [9.0, 436.0], [9.1, 436.0], [9.2, 436.0], [9.3, 438.0], [9.4, 438.0], [9.5, 440.0], [9.6, 440.0], [9.7, 440.0], [9.8, 440.0], [9.9, 440.0], [10.0, 441.0], [10.1, 441.0], [10.2, 441.0], [10.3, 441.0], [10.4, 441.0], [10.5, 443.0], [10.6, 443.0], [10.7, 443.0], [10.8, 444.0], [10.9, 444.0], [11.0, 445.0], [11.1, 445.0], [11.2, 445.0], [11.3, 446.0], [11.4, 446.0], [11.5, 446.0], [11.6, 446.0], [11.7, 446.0], [11.8, 447.0], [11.9, 447.0], [12.0, 448.0], [12.1, 448.0], [12.2, 448.0], [12.3, 450.0], [12.4, 450.0], [12.5, 451.0], [12.6, 451.0], [12.7, 451.0], [12.8, 452.0], [12.9, 452.0], [13.0, 454.0], [13.1, 454.0], [13.2, 454.0], [13.3, 454.0], [13.4, 454.0], [13.5, 454.0], [13.6, 454.0], [13.7, 454.0], [13.8, 454.0], [13.9, 454.0], [14.0, 455.0], [14.1, 455.0], [14.2, 455.0], [14.3, 455.0], [14.4, 455.0], [14.5, 456.0], [14.6, 456.0], [14.7, 456.0], [14.8, 458.0], [14.9, 458.0], [15.0, 459.0], [15.1, 459.0], [15.2, 459.0], [15.3, 461.0], [15.4, 461.0], [15.5, 461.0], [15.6, 461.0], [15.7, 461.0], [15.8, 463.0], [15.9, 463.0], [16.0, 464.0], [16.1, 464.0], [16.2, 464.0], [16.3, 465.0], [16.4, 465.0], [16.5, 465.0], [16.6, 465.0], [16.7, 465.0], [16.8, 465.0], [16.9, 465.0], [17.0, 466.0], [17.1, 466.0], [17.2, 466.0], [17.3, 468.0], [17.4, 468.0], [17.5, 468.0], [17.6, 468.0], [17.7, 468.0], [17.8, 469.0], [17.9, 469.0], [18.0, 472.0], [18.1, 472.0], [18.2, 472.0], [18.3, 473.0], [18.4, 473.0], [18.5, 474.0], [18.6, 474.0], [18.7, 474.0], [18.8, 475.0], [18.9, 475.0], [19.0, 475.0], [19.1, 475.0], [19.2, 475.0], [19.3, 475.0], [19.4, 475.0], [19.5, 476.0], [19.6, 476.0], [19.7, 476.0], [19.8, 478.0], [19.9, 478.0], [20.0, 478.0], [20.1, 478.0], [20.2, 478.0], [20.3, 479.0], [20.4, 479.0], [20.5, 481.0], [20.6, 481.0], [20.7, 481.0], [20.8, 482.0], [20.9, 482.0], [21.0, 483.0], [21.1, 483.0], [21.2, 483.0], [21.3, 484.0], [21.4, 484.0], [21.5, 488.0], [21.6, 488.0], [21.7, 488.0], [21.8, 489.0], [21.9, 489.0], [22.0, 492.0], [22.1, 492.0], [22.2, 492.0], [22.3, 494.0], [22.4, 494.0], [22.5, 495.0], [22.6, 495.0], [22.7, 495.0], [22.8, 498.0], [22.9, 498.0], [23.0, 498.0], [23.1, 498.0], [23.2, 498.0], [23.3, 501.0], [23.4, 501.0], [23.5, 505.0], [23.6, 505.0], [23.7, 505.0], [23.8, 505.0], [23.9, 505.0], [24.0, 506.0], [24.1, 506.0], [24.2, 506.0], [24.3, 511.0], [24.4, 511.0], [24.5, 511.0], [24.6, 511.0], [24.7, 511.0], [24.8, 512.0], [24.9, 512.0], [25.0, 514.0], [25.1, 514.0], [25.2, 514.0], [25.3, 524.0], [25.4, 524.0], [25.5, 527.0], [25.6, 527.0], [25.7, 527.0], [25.8, 529.0], [25.9, 529.0], [26.0, 532.0], [26.1, 532.0], [26.2, 532.0], [26.3, 532.0], [26.4, 532.0], [26.5, 537.0], [26.6, 537.0], [26.7, 537.0], [26.8, 537.0], [26.9, 537.0], [27.0, 537.0], [27.1, 537.0], [27.2, 537.0], [27.3, 541.0], [27.4, 541.0], [27.5, 541.0], [27.6, 541.0], [27.7, 541.0], [27.8, 543.0], [27.9, 543.0], [28.0, 544.0], [28.1, 544.0], [28.2, 544.0], [28.3, 546.0], [28.4, 546.0], [28.5, 547.0], [28.6, 547.0], [28.7, 547.0], [28.8, 548.0], [28.9, 548.0], [29.0, 560.0], [29.1, 560.0], [29.2, 560.0], [29.3, 565.0], [29.4, 565.0], [29.5, 566.0], [29.6, 566.0], [29.7, 566.0], [29.8, 567.0], [29.9, 567.0], [30.0, 567.0], [30.1, 567.0], [30.2, 567.0], [30.3, 575.0], [30.4, 575.0], [30.5, 577.0], [30.6, 577.0], [30.7, 577.0], [30.8, 580.0], [30.9, 580.0], [31.0, 585.0], [31.1, 585.0], [31.2, 585.0], [31.3, 586.0], [31.4, 586.0], [31.5, 592.0], [31.6, 592.0], [31.7, 592.0], [31.8, 594.0], [31.9, 594.0], [32.0, 596.0], [32.1, 596.0], [32.2, 596.0], [32.3, 598.0], [32.4, 598.0], [32.5, 599.0], [32.6, 599.0], [32.7, 599.0], [32.8, 600.0], [32.9, 600.0], [33.0, 605.0], [33.1, 605.0], [33.2, 605.0], [33.3, 606.0], [33.4, 606.0], [33.5, 607.0], [33.6, 607.0], [33.7, 607.0], [33.8, 607.0], [33.9, 607.0], [34.0, 608.0], [34.1, 608.0], [34.2, 608.0], [34.3, 610.0], [34.4, 610.0], [34.5, 612.0], [34.6, 612.0], [34.7, 612.0], [34.8, 619.0], [34.9, 619.0], [35.0, 632.0], [35.1, 632.0], [35.2, 632.0], [35.3, 633.0], [35.4, 633.0], [35.5, 634.0], [35.6, 634.0], [35.7, 634.0], [35.8, 637.0], [35.9, 637.0], [36.0, 646.0], [36.1, 646.0], [36.2, 646.0], [36.3, 651.0], [36.4, 651.0], [36.5, 652.0], [36.6, 652.0], [36.7, 652.0], [36.8, 657.0], [36.9, 657.0], [37.0, 658.0], [37.1, 658.0], [37.2, 658.0], [37.3, 659.0], [37.4, 659.0], [37.5, 670.0], [37.6, 670.0], [37.7, 670.0], [37.8, 672.0], [37.9, 672.0], [38.0, 673.0], [38.1, 673.0], [38.2, 673.0], [38.3, 673.0], [38.4, 673.0], [38.5, 675.0], [38.6, 675.0], [38.7, 675.0], [38.8, 676.0], [38.9, 676.0], [39.0, 691.0], [39.1, 691.0], [39.2, 691.0], [39.3, 692.0], [39.4, 692.0], [39.5, 717.0], [39.6, 717.0], [39.7, 717.0], [39.8, 720.0], [39.9, 720.0], [40.0, 721.0], [40.1, 721.0], [40.2, 721.0], [40.3, 726.0], [40.4, 726.0], [40.5, 726.0], [40.6, 726.0], [40.7, 726.0], [40.8, 730.0], [40.9, 730.0], [41.0, 733.0], [41.1, 733.0], [41.2, 733.0], [41.3, 737.0], [41.4, 737.0], [41.5, 739.0], [41.6, 739.0], [41.7, 739.0], [41.8, 741.0], [41.9, 741.0], [42.0, 746.0], [42.1, 746.0], [42.2, 746.0], [42.3, 748.0], [42.4, 748.0], [42.5, 751.0], [42.6, 751.0], [42.7, 751.0], [42.8, 756.0], [42.9, 756.0], [43.0, 767.0], [43.1, 767.0], [43.2, 767.0], [43.3, 768.0], [43.4, 768.0], [43.5, 774.0], [43.6, 774.0], [43.7, 774.0], [43.8, 777.0], [43.9, 777.0], [44.0, 778.0], [44.1, 778.0], [44.2, 778.0], [44.3, 778.0], [44.4, 778.0], [44.5, 781.0], [44.6, 781.0], [44.7, 781.0], [44.8, 782.0], [44.9, 782.0], [45.0, 790.0], [45.1, 790.0], [45.2, 790.0], [45.3, 793.0], [45.4, 793.0], [45.5, 796.0], [45.6, 796.0], [45.7, 796.0], [45.8, 805.0], [45.9, 805.0], [46.0, 823.0], [46.1, 823.0], [46.2, 823.0], [46.3, 826.0], [46.4, 826.0], [46.5, 826.0], [46.6, 826.0], [46.7, 826.0], [46.8, 836.0], [46.9, 836.0], [47.0, 839.0], [47.1, 839.0], [47.2, 839.0], [47.3, 845.0], [47.4, 845.0], [47.5, 856.0], [47.6, 856.0], [47.7, 856.0], [47.8, 873.0], [47.9, 873.0], [48.0, 885.0], [48.1, 885.0], [48.2, 885.0], [48.3, 889.0], [48.4, 889.0], [48.5, 896.0], [48.6, 896.0], [48.7, 896.0], [48.8, 900.0], [48.9, 900.0], [49.0, 914.0], [49.1, 914.0], [49.2, 914.0], [49.3, 915.0], [49.4, 915.0], [49.5, 917.0], [49.6, 917.0], [49.7, 917.0], [49.8, 919.0], [49.9, 919.0], [50.0, 927.0], [50.1, 927.0], [50.2, 927.0], [50.3, 928.0], [50.4, 928.0], [50.5, 928.0], [50.6, 928.0], [50.7, 928.0], [50.8, 933.0], [50.9, 933.0], [51.0, 934.0], [51.1, 934.0], [51.2, 934.0], [51.3, 939.0], [51.4, 939.0], [51.5, 946.0], [51.6, 946.0], [51.7, 946.0], [51.8, 947.0], [51.9, 947.0], [52.0, 948.0], [52.1, 948.0], [52.2, 948.0], [52.3, 956.0], [52.4, 956.0], [52.5, 964.0], [52.6, 964.0], [52.7, 964.0], [52.8, 970.0], [52.9, 970.0], [53.0, 973.0], [53.1, 973.0], [53.2, 973.0], [53.3, 981.0], [53.4, 981.0], [53.5, 986.0], [53.6, 986.0], [53.7, 986.0], [53.8, 990.0], [53.9, 990.0], [54.0, 991.0], [54.1, 991.0], [54.2, 991.0], [54.3, 998.0], [54.4, 998.0], [54.5, 1007.0], [54.6, 1007.0], [54.7, 1007.0], [54.8, 1008.0], [54.9, 1008.0], [55.0, 1024.0], [55.1, 1024.0], [55.2, 1024.0], [55.3, 1029.0], [55.4, 1029.0], [55.5, 1029.0], [55.6, 1029.0], [55.7, 1029.0], [55.8, 1030.0], [55.9, 1030.0], [56.0, 1030.0], [56.1, 1030.0], [56.2, 1030.0], [56.3, 1037.0], [56.4, 1037.0], [56.5, 1037.0], [56.6, 1037.0], [56.7, 1037.0], [56.8, 1042.0], [56.9, 1042.0], [57.0, 1050.0], [57.1, 1050.0], [57.2, 1050.0], [57.3, 1050.0], [57.4, 1050.0], [57.5, 1051.0], [57.6, 1051.0], [57.7, 1051.0], [57.8, 1052.0], [57.9, 1052.0], [58.0, 1055.0], [58.1, 1055.0], [58.2, 1055.0], [58.3, 1060.0], [58.4, 1060.0], [58.5, 1065.0], [58.6, 1065.0], [58.7, 1065.0], [58.8, 1071.0], [58.9, 1071.0], [59.0, 1074.0], [59.1, 1074.0], [59.2, 1074.0], [59.3, 1077.0], [59.4, 1077.0], [59.5, 1079.0], [59.6, 1079.0], [59.7, 1079.0], [59.8, 1080.0], [59.9, 1080.0], [60.0, 1088.0], [60.1, 1088.0], [60.2, 1088.0], [60.3, 1089.0], [60.4, 1089.0], [60.5, 1091.0], [60.6, 1091.0], [60.7, 1091.0], [60.8, 1092.0], [60.9, 1092.0], [61.0, 1093.0], [61.1, 1093.0], [61.2, 1093.0], [61.3, 1093.0], [61.4, 1093.0], [61.5, 1094.0], [61.6, 1094.0], [61.7, 1094.0], [61.8, 1097.0], [61.9, 1097.0], [62.0, 1103.0], [62.1, 1103.0], [62.2, 1103.0], [62.3, 1103.0], [62.4, 1103.0], [62.5, 1106.0], [62.6, 1106.0], [62.7, 1106.0], [62.8, 1107.0], [62.9, 1107.0], [63.0, 1110.0], [63.1, 1110.0], [63.2, 1110.0], [63.3, 1110.0], [63.4, 1110.0], [63.5, 1113.0], [63.6, 1113.0], [63.7, 1113.0], [63.8, 1118.0], [63.9, 1118.0], [64.0, 1121.0], [64.1, 1121.0], [64.2, 1121.0], [64.3, 1122.0], [64.4, 1122.0], [64.5, 1127.0], [64.6, 1127.0], [64.7, 1127.0], [64.8, 1128.0], [64.9, 1128.0], [65.0, 1128.0], [65.1, 1128.0], [65.2, 1128.0], [65.3, 1129.0], [65.4, 1129.0], [65.5, 1132.0], [65.6, 1132.0], [65.7, 1132.0], [65.8, 1137.0], [65.9, 1137.0], [66.0, 1138.0], [66.1, 1138.0], [66.2, 1138.0], [66.3, 1139.0], [66.4, 1139.0], [66.5, 1139.0], [66.6, 1139.0], [66.7, 1139.0], [66.8, 1141.0], [66.9, 1141.0], [67.0, 1141.0], [67.1, 1141.0], [67.2, 1141.0], [67.3, 1144.0], [67.4, 1144.0], [67.5, 1146.0], [67.6, 1146.0], [67.7, 1146.0], [67.8, 1151.0], [67.9, 1151.0], [68.0, 1152.0], [68.1, 1152.0], [68.2, 1152.0], [68.3, 1152.0], [68.4, 1152.0], [68.5, 1155.0], [68.6, 1155.0], [68.7, 1155.0], [68.8, 1158.0], [68.9, 1158.0], [69.0, 1159.0], [69.1, 1159.0], [69.2, 1159.0], [69.3, 1161.0], [69.4, 1161.0], [69.5, 1164.0], [69.6, 1164.0], [69.7, 1164.0], [69.8, 1169.0], [69.9, 1169.0], [70.0, 1172.0], [70.1, 1172.0], [70.2, 1172.0], [70.3, 1173.0], [70.4, 1173.0], [70.5, 1178.0], [70.6, 1178.0], [70.7, 1178.0], [70.8, 1179.0], [70.9, 1179.0], [71.0, 1179.0], [71.1, 1179.0], [71.2, 1179.0], [71.3, 1181.0], [71.4, 1181.0], [71.5, 1181.0], [71.6, 1181.0], [71.7, 1181.0], [71.8, 1182.0], [71.9, 1182.0], [72.0, 1184.0], [72.1, 1184.0], [72.2, 1184.0], [72.3, 1190.0], [72.4, 1190.0], [72.5, 1193.0], [72.6, 1193.0], [72.7, 1193.0], [72.8, 1197.0], [72.9, 1197.0], [73.0, 1204.0], [73.1, 1204.0], [73.2, 1204.0], [73.3, 1205.0], [73.4, 1205.0], [73.5, 1206.0], [73.6, 1206.0], [73.7, 1206.0], [73.8, 1207.0], [73.9, 1207.0], [74.0, 1209.0], [74.1, 1209.0], [74.2, 1209.0], [74.3, 1210.0], [74.4, 1210.0], [74.5, 1210.0], [74.6, 1210.0], [74.7, 1210.0], [74.8, 1218.0], [74.9, 1218.0], [75.0, 1220.0], [75.1, 1220.0], [75.2, 1220.0], [75.3, 1230.0], [75.4, 1230.0], [75.5, 1234.0], [75.6, 1234.0], [75.7, 1234.0], [75.8, 1235.0], [75.9, 1235.0], [76.0, 1240.0], [76.1, 1240.0], [76.2, 1240.0], [76.3, 1241.0], [76.4, 1241.0], [76.5, 1274.0], [76.6, 1274.0], [76.7, 1274.0], [76.8, 1275.0], [76.9, 1275.0], [77.0, 1278.0], [77.1, 1278.0], [77.2, 1278.0], [77.3, 1278.0], [77.4, 1278.0], [77.5, 1280.0], [77.6, 1280.0], [77.7, 1280.0], [77.8, 1286.0], [77.9, 1286.0], [78.0, 1293.0], [78.1, 1293.0], [78.2, 1293.0], [78.3, 1293.0], [78.4, 1293.0], [78.5, 1301.0], [78.6, 1301.0], [78.7, 1301.0], [78.8, 1304.0], [78.9, 1304.0], [79.0, 1318.0], [79.1, 1318.0], [79.2, 1318.0], [79.3, 1319.0], [79.4, 1319.0], [79.5, 1322.0], [79.6, 1322.0], [79.7, 1322.0], [79.8, 1325.0], [79.9, 1325.0], [80.0, 1349.0], [80.1, 1349.0], [80.2, 1349.0], [80.3, 1357.0], [80.4, 1357.0], [80.5, 1360.0], [80.6, 1360.0], [80.7, 1360.0], [80.8, 1365.0], [80.9, 1365.0], [81.0, 1377.0], [81.1, 1377.0], [81.2, 1377.0], [81.3, 1380.0], [81.4, 1380.0], [81.5, 1385.0], [81.6, 1385.0], [81.7, 1385.0], [81.8, 1395.0], [81.9, 1395.0], [82.0, 1406.0], [82.1, 1406.0], [82.2, 1406.0], [82.3, 1410.0], [82.4, 1410.0], [82.5, 1421.0], [82.6, 1421.0], [82.7, 1421.0], [82.8, 1422.0], [82.9, 1422.0], [83.0, 1423.0], [83.1, 1423.0], [83.2, 1423.0], [83.3, 1430.0], [83.4, 1430.0], [83.5, 1458.0], [83.6, 1458.0], [83.7, 1458.0], [83.8, 1472.0], [83.9, 1472.0], [84.0, 1486.0], [84.1, 1486.0], [84.2, 1486.0], [84.3, 1499.0], [84.4, 1499.0], [84.5, 1505.0], [84.6, 1505.0], [84.7, 1505.0], [84.8, 1506.0], [84.9, 1506.0], [85.0, 1522.0], [85.1, 1522.0], [85.2, 1522.0], [85.3, 1529.0], [85.4, 1529.0], [85.5, 1538.0], [85.6, 1538.0], [85.7, 1538.0], [85.8, 1538.0], [85.9, 1538.0], [86.0, 1544.0], [86.1, 1544.0], [86.2, 1544.0], [86.3, 1561.0], [86.4, 1561.0], [86.5, 1596.0], [86.6, 1596.0], [86.7, 1596.0], [86.8, 1608.0], [86.9, 1608.0], [87.0, 1609.0], [87.1, 1609.0], [87.2, 1609.0], [87.3, 1629.0], [87.4, 1629.0], [87.5, 1641.0], [87.6, 1641.0], [87.7, 1641.0], [87.8, 1650.0], [87.9, 1650.0], [88.0, 1657.0], [88.1, 1657.0], [88.2, 1657.0], [88.3, 1659.0], [88.4, 1659.0], [88.5, 1675.0], [88.6, 1675.0], [88.7, 1675.0], [88.8, 1685.0], [88.9, 1685.0], [89.0, 1726.0], [89.1, 1726.0], [89.2, 1726.0], [89.3, 1735.0], [89.4, 1735.0], [89.5, 1757.0], [89.6, 1757.0], [89.7, 1757.0], [89.8, 1771.0], [89.9, 1771.0], [90.0, 1821.0], [90.1, 1821.0], [90.2, 1821.0], [90.3, 1838.0], [90.4, 1838.0], [90.5, 1854.0], [90.6, 1854.0], [90.7, 1854.0], [90.8, 1856.0], [90.9, 1856.0], [91.0, 1881.0], [91.1, 1881.0], [91.2, 1881.0], [91.3, 1909.0], [91.4, 1909.0], [91.5, 1923.0], [91.6, 1923.0], [91.7, 1923.0], [91.8, 1926.0], [91.9, 1926.0], [92.0, 1927.0], [92.1, 1927.0], [92.2, 1927.0], [92.3, 1954.0], [92.4, 1954.0], [92.5, 1984.0], [92.6, 1984.0], [92.7, 1984.0], [92.8, 2000.0], [92.9, 2000.0], [93.0, 2036.0], [93.1, 2036.0], [93.2, 2036.0], [93.3, 2046.0], [93.4, 2046.0], [93.5, 2047.0], [93.6, 2047.0], [93.7, 2047.0], [93.8, 2125.0], [93.9, 2125.0], [94.0, 2136.0], [94.1, 2136.0], [94.2, 2136.0], [94.3, 2141.0], [94.4, 2141.0], [94.5, 2144.0], [94.6, 2144.0], [94.7, 2144.0], [94.8, 2157.0], [94.9, 2157.0], [95.0, 2180.0], [95.1, 2180.0], [95.2, 2180.0], [95.3, 2190.0], [95.4, 2190.0], [95.5, 2230.0], [95.6, 2230.0], [95.7, 2230.0], [95.8, 2236.0], [95.9, 2236.0], [96.0, 2250.0], [96.1, 2250.0], [96.2, 2250.0], [96.3, 2254.0], [96.4, 2254.0], [96.5, 2375.0], [96.6, 2375.0], [96.7, 2375.0], [96.8, 2426.0], [96.9, 2426.0], [97.0, 2433.0], [97.1, 2433.0], [97.2, 2433.0], [97.3, 2610.0], [97.4, 2610.0], [97.5, 2624.0], [97.6, 2624.0], [97.7, 2624.0], [97.8, 2650.0], [97.9, 2650.0], [98.0, 2751.0], [98.1, 2751.0], [98.2, 2751.0], [98.3, 2857.0], [98.4, 2857.0], [98.5, 2874.0], [98.6, 2874.0], [98.7, 2874.0], [98.8, 3527.0], [98.9, 3527.0], [99.0, 3534.0], [99.1, 3534.0], [99.2, 3534.0], [99.3, 3658.0], [99.4, 3658.0], [99.5, 3979.0], [99.6, 3979.0], [99.7, 3979.0], [99.8, 4478.0], [99.9, 4478.0]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[0.0, 362.0], [0.1, 364.0], [0.2, 368.0], [0.3, 368.0], [0.4, 368.0], [0.5, 370.0], [0.6, 370.0], [0.7, 371.0], [0.8, 372.0], [0.9, 372.0], [1.0, 372.0], [1.1, 372.0], [1.2, 372.0], [1.3, 373.0], [1.4, 374.0], [1.5, 375.0], [1.6, 375.0], [1.7, 375.0], [1.8, 376.0], [1.9, 376.0], [2.0, 378.0], [2.1, 379.0], [2.2, 379.0], [2.3, 379.0], [2.4, 380.0], [2.5, 380.0], [2.6, 380.0], [2.7, 382.0], [2.8, 382.0], [2.9, 382.0], [3.0, 383.0], [3.1, 383.0], [3.2, 384.0], [3.3, 384.0], [3.4, 384.0], [3.5, 384.0], [3.6, 384.0], [3.7, 385.0], [3.8, 386.0], [3.9, 386.0], [4.0, 386.0], [4.1, 386.0], [4.2, 386.0], [4.3, 387.0], [4.4, 387.0], [4.5, 388.0], [4.6, 389.0], [4.7, 390.0], [4.8, 390.0], [4.9, 390.0], [5.0, 391.0], [5.1, 391.0], [5.2, 391.0], [5.3, 392.0], [5.4, 393.0], [5.5, 394.0], [5.6, 395.0], [5.7, 395.0], [5.8, 396.0], [5.9, 396.0], [6.0, 397.0], [6.1, 397.0], [6.2, 398.0], [6.3, 398.0], [6.4, 398.0], [6.5, 398.0], [6.6, 398.0], [6.7, 398.0], [6.8, 399.0], [6.9, 399.0], [7.0, 399.0], [7.1, 399.0], [7.2, 401.0], [7.3, 402.0], [7.4, 402.0], [7.5, 403.0], [7.6, 403.0], [7.7, 404.0], [7.8, 405.0], [7.9, 405.0], [8.0, 406.0], [8.1, 407.0], [8.2, 408.0], [8.3, 409.0], [8.4, 409.0], [8.5, 410.0], [8.6, 411.0], [8.7, 412.0], [8.8, 412.0], [8.9, 412.0], [9.0, 413.0], [9.1, 413.0], [9.2, 415.0], [9.3, 416.0], [9.4, 418.0], [9.5, 418.0], [9.6, 418.0], [9.7, 419.0], [9.8, 419.0], [9.9, 419.0], [10.0, 419.0], [10.1, 420.0], [10.2, 420.0], [10.3, 420.0], [10.4, 421.0], [10.5, 421.0], [10.6, 421.0], [10.7, 421.0], [10.8, 421.0], [10.9, 421.0], [11.0, 422.0], [11.1, 422.0], [11.2, 422.0], [11.3, 423.0], [11.4, 423.0], [11.5, 423.0], [11.6, 423.0], [11.7, 423.0], [11.8, 423.0], [11.9, 424.0], [12.0, 424.0], [12.1, 424.0], [12.2, 424.0], [12.3, 424.0], [12.4, 425.0], [12.5, 425.0], [12.6, 425.0], [12.7, 425.0], [12.8, 425.0], [12.9, 425.0], [13.0, 426.0], [13.1, 426.0], [13.2, 426.0], [13.3, 426.0], [13.4, 426.0], [13.5, 427.0], [13.6, 427.0], [13.7, 427.0], [13.8, 428.0], [13.9, 428.0], [14.0, 428.0], [14.1, 428.0], [14.2, 428.0], [14.3, 428.0], [14.4, 428.0], [14.5, 428.0], [14.6, 429.0], [14.7, 429.0], [14.8, 430.0], [14.9, 430.0], [15.0, 430.0], [15.1, 431.0], [15.2, 431.0], [15.3, 431.0], [15.4, 431.0], [15.5, 432.0], [15.6, 432.0], [15.7, 432.0], [15.8, 432.0], [15.9, 432.0], [16.0, 433.0], [16.1, 434.0], [16.2, 434.0], [16.3, 434.0], [16.4, 434.0], [16.5, 434.0], [16.6, 434.0], [16.7, 435.0], [16.8, 435.0], [16.9, 435.0], [17.0, 436.0], [17.1, 436.0], [17.2, 436.0], [17.3, 436.0], [17.4, 436.0], [17.5, 436.0], [17.6, 437.0], [17.7, 437.0], [17.8, 438.0], [17.9, 438.0], [18.0, 438.0], [18.1, 438.0], [18.2, 438.0], [18.3, 438.0], [18.4, 438.0], [18.5, 439.0], [18.6, 439.0], [18.7, 439.0], [18.8, 440.0], [18.9, 440.0], [19.0, 441.0], [19.1, 441.0], [19.2, 442.0], [19.3, 442.0], [19.4, 443.0], [19.5, 443.0], [19.6, 443.0], [19.7, 443.0], [19.8, 444.0], [19.9, 444.0], [20.0, 444.0], [20.1, 445.0], [20.2, 445.0], [20.3, 445.0], [20.4, 445.0], [20.5, 446.0], [20.6, 446.0], [20.7, 446.0], [20.8, 446.0], [20.9, 447.0], [21.0, 447.0], [21.1, 447.0], [21.2, 448.0], [21.3, 448.0], [21.4, 448.0], [21.5, 449.0], [21.6, 449.0], [21.7, 449.0], [21.8, 450.0], [21.9, 450.0], [22.0, 451.0], [22.1, 451.0], [22.2, 451.0], [22.3, 451.0], [22.4, 451.0], [22.5, 452.0], [22.6, 452.0], [22.7, 453.0], [22.8, 453.0], [22.9, 454.0], [23.0, 454.0], [23.1, 454.0], [23.2, 455.0], [23.3, 455.0], [23.4, 455.0], [23.5, 455.0], [23.6, 455.0], [23.7, 455.0], [23.8, 456.0], [23.9, 456.0], [24.0, 456.0], [24.1, 456.0], [24.2, 456.0], [24.3, 457.0], [24.4, 457.0], [24.5, 457.0], [24.6, 459.0], [24.7, 459.0], [24.8, 459.0], [24.9, 460.0], [25.0, 460.0], [25.1, 461.0], [25.2, 461.0], [25.3, 461.0], [25.4, 461.0], [25.5, 463.0], [25.6, 463.0], [25.7, 464.0], [25.8, 464.0], [25.9, 465.0], [26.0, 466.0], [26.1, 466.0], [26.2, 466.0], [26.3, 467.0], [26.4, 468.0], [26.5, 469.0], [26.6, 469.0], [26.7, 470.0], [26.8, 470.0], [26.9, 471.0], [27.0, 472.0], [27.1, 472.0], [27.2, 472.0], [27.3, 473.0], [27.4, 473.0], [27.5, 474.0], [27.6, 475.0], [27.7, 475.0], [27.8, 475.0], [27.9, 475.0], [28.0, 476.0], [28.1, 477.0], [28.2, 477.0], [28.3, 477.0], [28.4, 477.0], [28.5, 477.0], [28.6, 477.0], [28.7, 477.0], [28.8, 478.0], [28.9, 478.0], [29.0, 479.0], [29.1, 480.0], [29.2, 481.0], [29.3, 484.0], [29.4, 484.0], [29.5, 485.0], [29.6, 485.0], [29.7, 486.0], [29.8, 486.0], [29.9, 487.0], [30.0, 488.0], [30.1, 488.0], [30.2, 488.0], [30.3, 489.0], [30.4, 489.0], [30.5, 489.0], [30.6, 490.0], [30.7, 490.0], [30.8, 490.0], [30.9, 491.0], [31.0, 491.0], [31.1, 491.0], [31.2, 491.0], [31.3, 492.0], [31.4, 492.0], [31.5, 493.0], [31.6, 496.0], [31.7, 496.0], [31.8, 497.0], [31.9, 497.0], [32.0, 498.0], [32.1, 499.0], [32.2, 499.0], [32.3, 499.0], [32.4, 500.0], [32.5, 502.0], [32.6, 502.0], [32.7, 503.0], [32.8, 503.0], [32.9, 504.0], [33.0, 505.0], [33.1, 505.0], [33.2, 507.0], [33.3, 507.0], [33.4, 507.0], [33.5, 508.0], [33.6, 510.0], [33.7, 511.0], [33.8, 511.0], [33.9, 511.0], [34.0, 513.0], [34.1, 515.0], [34.2, 516.0], [34.3, 517.0], [34.4, 519.0], [34.5, 520.0], [34.6, 521.0], [34.7, 521.0], [34.8, 522.0], [34.9, 523.0], [35.0, 525.0], [35.1, 529.0], [35.2, 530.0], [35.3, 535.0], [35.4, 535.0], [35.5, 537.0], [35.6, 537.0], [35.7, 541.0], [35.8, 542.0], [35.9, 542.0], [36.0, 543.0], [36.1, 544.0], [36.2, 544.0], [36.3, 547.0], [36.4, 547.0], [36.5, 548.0], [36.6, 552.0], [36.7, 552.0], [36.8, 553.0], [36.9, 555.0], [37.0, 564.0], [37.1, 564.0], [37.2, 566.0], [37.3, 566.0], [37.4, 567.0], [37.5, 568.0], [37.6, 570.0], [37.7, 570.0], [37.8, 572.0], [37.9, 572.0], [38.0, 573.0], [38.1, 574.0], [38.2, 575.0], [38.3, 575.0], [38.4, 576.0], [38.5, 577.0], [38.6, 578.0], [38.7, 580.0], [38.8, 581.0], [38.9, 582.0], [39.0, 582.0], [39.1, 583.0], [39.2, 584.0], [39.3, 586.0], [39.4, 587.0], [39.5, 587.0], [39.6, 588.0], [39.7, 588.0], [39.8, 588.0], [39.9, 590.0], [40.0, 590.0], [40.1, 590.0], [40.2, 592.0], [40.3, 593.0], [40.4, 593.0], [40.5, 596.0], [40.6, 603.0], [40.7, 604.0], [40.8, 606.0], [40.9, 606.0], [41.0, 610.0], [41.1, 610.0], [41.2, 611.0], [41.3, 612.0], [41.4, 615.0], [41.5, 616.0], [41.6, 618.0], [41.7, 620.0], [41.8, 622.0], [41.9, 623.0], [42.0, 627.0], [42.1, 627.0], [42.2, 627.0], [42.3, 628.0], [42.4, 628.0], [42.5, 630.0], [42.6, 633.0], [42.7, 634.0], [42.8, 635.0], [42.9, 636.0], [43.0, 637.0], [43.1, 639.0], [43.2, 642.0], [43.3, 645.0], [43.4, 645.0], [43.5, 647.0], [43.6, 648.0], [43.7, 648.0], [43.8, 648.0], [43.9, 650.0], [44.0, 653.0], [44.1, 656.0], [44.2, 658.0], [44.3, 660.0], [44.4, 665.0], [44.5, 665.0], [44.6, 665.0], [44.7, 671.0], [44.8, 673.0], [44.9, 675.0], [45.0, 677.0], [45.1, 677.0], [45.2, 678.0], [45.3, 679.0], [45.4, 680.0], [45.5, 682.0], [45.6, 682.0], [45.7, 682.0], [45.8, 685.0], [45.9, 686.0], [46.0, 688.0], [46.1, 688.0], [46.2, 688.0], [46.3, 690.0], [46.4, 691.0], [46.5, 691.0], [46.6, 696.0], [46.7, 697.0], [46.8, 698.0], [46.9, 698.0], [47.0, 700.0], [47.1, 704.0], [47.2, 707.0], [47.3, 710.0], [47.4, 710.0], [47.5, 711.0], [47.6, 711.0], [47.7, 713.0], [47.8, 714.0], [47.9, 715.0], [48.0, 717.0], [48.1, 721.0], [48.2, 724.0], [48.3, 727.0], [48.4, 727.0], [48.5, 728.0], [48.6, 729.0], [48.7, 731.0], [48.8, 731.0], [48.9, 734.0], [49.0, 734.0], [49.1, 734.0], [49.2, 736.0], [49.3, 737.0], [49.4, 738.0], [49.5, 739.0], [49.6, 741.0], [49.7, 743.0], [49.8, 752.0], [49.9, 757.0], [50.0, 760.0], [50.1, 762.0], [50.2, 762.0], [50.3, 764.0], [50.4, 764.0], [50.5, 764.0], [50.6, 767.0], [50.7, 770.0], [50.8, 775.0], [50.9, 776.0], [51.0, 780.0], [51.1, 781.0], [51.2, 782.0], [51.3, 786.0], [51.4, 789.0], [51.5, 789.0], [51.6, 789.0], [51.7, 792.0], [51.8, 792.0], [51.9, 794.0], [52.0, 794.0], [52.1, 795.0], [52.2, 798.0], [52.3, 805.0], [52.4, 807.0], [52.5, 808.0], [52.6, 815.0], [52.7, 825.0], [52.8, 825.0], [52.9, 827.0], [53.0, 827.0], [53.1, 828.0], [53.2, 834.0], [53.3, 837.0], [53.4, 839.0], [53.5, 842.0], [53.6, 843.0], [53.7, 843.0], [53.8, 846.0], [53.9, 846.0], [54.0, 846.0], [54.1, 847.0], [54.2, 859.0], [54.3, 859.0], [54.4, 860.0], [54.5, 861.0], [54.6, 864.0], [54.7, 866.0], [54.8, 867.0], [54.9, 868.0], [55.0, 871.0], [55.1, 873.0], [55.2, 873.0], [55.3, 875.0], [55.4, 877.0], [55.5, 877.0], [55.6, 878.0], [55.7, 878.0], [55.8, 880.0], [55.9, 880.0], [56.0, 882.0], [56.1, 888.0], [56.2, 890.0], [56.3, 891.0], [56.4, 892.0], [56.5, 893.0], [56.6, 894.0], [56.7, 898.0], [56.8, 901.0], [56.9, 901.0], [57.0, 903.0], [57.1, 907.0], [57.2, 911.0], [57.3, 913.0], [57.4, 914.0], [57.5, 914.0], [57.6, 918.0], [57.7, 921.0], [57.8, 926.0], [57.9, 928.0], [58.0, 930.0], [58.1, 932.0], [58.2, 939.0], [58.3, 943.0], [58.4, 945.0], [58.5, 946.0], [58.6, 947.0], [58.7, 948.0], [58.8, 957.0], [58.9, 959.0], [59.0, 960.0], [59.1, 964.0], [59.2, 967.0], [59.3, 970.0], [59.4, 970.0], [59.5, 971.0], [59.6, 973.0], [59.7, 973.0], [59.8, 973.0], [59.9, 977.0], [60.0, 978.0], [60.1, 980.0], [60.2, 980.0], [60.3, 987.0], [60.4, 987.0], [60.5, 989.0], [60.6, 992.0], [60.7, 999.0], [60.8, 1000.0], [60.9, 1000.0], [61.0, 1010.0], [61.1, 1011.0], [61.2, 1013.0], [61.3, 1021.0], [61.4, 1022.0], [61.5, 1023.0], [61.6, 1026.0], [61.7, 1027.0], [61.8, 1027.0], [61.9, 1028.0], [62.0, 1034.0], [62.1, 1036.0], [62.2, 1038.0], [62.3, 1041.0], [62.4, 1041.0], [62.5, 1041.0], [62.6, 1045.0], [62.7, 1046.0], [62.8, 1052.0], [62.9, 1053.0], [63.0, 1055.0], [63.1, 1055.0], [63.2, 1056.0], [63.3, 1057.0], [63.4, 1060.0], [63.5, 1062.0], [63.6, 1063.0], [63.7, 1064.0], [63.8, 1064.0], [63.9, 1064.0], [64.0, 1065.0], [64.1, 1065.0], [64.2, 1065.0], [64.3, 1066.0], [64.4, 1067.0], [64.5, 1067.0], [64.6, 1068.0], [64.7, 1070.0], [64.8, 1072.0], [64.9, 1074.0], [65.0, 1074.0], [65.1, 1076.0], [65.2, 1077.0], [65.3, 1077.0], [65.4, 1078.0], [65.5, 1078.0], [65.6, 1080.0], [65.7, 1081.0], [65.8, 1081.0], [65.9, 1082.0], [66.0, 1082.0], [66.1, 1083.0], [66.2, 1084.0], [66.3, 1085.0], [66.4, 1085.0], [66.5, 1086.0], [66.6, 1088.0], [66.7, 1088.0], [66.8, 1090.0], [66.9, 1090.0], [67.0, 1091.0], [67.1, 1091.0], [67.2, 1093.0], [67.3, 1094.0], [67.4, 1096.0], [67.5, 1097.0], [67.6, 1097.0], [67.7, 1099.0], [67.8, 1099.0], [67.9, 1100.0], [68.0, 1100.0], [68.1, 1101.0], [68.2, 1101.0], [68.3, 1102.0], [68.4, 1103.0], [68.5, 1103.0], [68.6, 1104.0], [68.7, 1105.0], [68.8, 1106.0], [68.9, 1106.0], [69.0, 1106.0], [69.1, 1107.0], [69.2, 1108.0], [69.3, 1109.0], [69.4, 1109.0], [69.5, 1112.0], [69.6, 1112.0], [69.7, 1112.0], [69.8, 1112.0], [69.9, 1114.0], [70.0, 1115.0], [70.1, 1115.0], [70.2, 1115.0], [70.3, 1115.0], [70.4, 1115.0], [70.5, 1115.0], [70.6, 1120.0], [70.7, 1121.0], [70.8, 1121.0], [70.9, 1122.0], [71.0, 1125.0], [71.1, 1128.0], [71.2, 1128.0], [71.3, 1128.0], [71.4, 1129.0], [71.5, 1130.0], [71.6, 1130.0], [71.7, 1130.0], [71.8, 1131.0], [71.9, 1134.0], [72.0, 1136.0], [72.1, 1136.0], [72.2, 1136.0], [72.3, 1137.0], [72.4, 1138.0], [72.5, 1139.0], [72.6, 1140.0], [72.7, 1141.0], [72.8, 1142.0], [72.9, 1142.0], [73.0, 1142.0], [73.1, 1142.0], [73.2, 1143.0], [73.3, 1143.0], [73.4, 1143.0], [73.5, 1149.0], [73.6, 1150.0], [73.7, 1151.0], [73.8, 1152.0], [73.9, 1154.0], [74.0, 1154.0], [74.1, 1155.0], [74.2, 1155.0], [74.3, 1157.0], [74.4, 1157.0], [74.5, 1160.0], [74.6, 1162.0], [74.7, 1169.0], [74.8, 1170.0], [74.9, 1171.0], [75.0, 1171.0], [75.1, 1172.0], [75.2, 1174.0], [75.3, 1175.0], [75.4, 1177.0], [75.5, 1177.0], [75.6, 1177.0], [75.7, 1178.0], [75.8, 1178.0], [75.9, 1178.0], [76.0, 1183.0], [76.1, 1184.0], [76.2, 1186.0], [76.3, 1187.0], [76.4, 1190.0], [76.5, 1194.0], [76.6, 1194.0], [76.7, 1195.0], [76.8, 1200.0], [76.9, 1201.0], [77.0, 1201.0], [77.1, 1201.0], [77.2, 1202.0], [77.3, 1203.0], [77.4, 1203.0], [77.5, 1204.0], [77.6, 1205.0], [77.7, 1206.0], [77.8, 1206.0], [77.9, 1207.0], [78.0, 1207.0], [78.1, 1208.0], [78.2, 1210.0], [78.3, 1211.0], [78.4, 1215.0], [78.5, 1216.0], [78.6, 1216.0], [78.7, 1217.0], [78.8, 1218.0], [78.9, 1221.0], [79.0, 1222.0], [79.1, 1222.0], [79.2, 1223.0], [79.3, 1223.0], [79.4, 1224.0], [79.5, 1226.0], [79.6, 1226.0], [79.7, 1226.0], [79.8, 1226.0], [79.9, 1227.0], [80.0, 1227.0], [80.1, 1230.0], [80.2, 1234.0], [80.3, 1235.0], [80.4, 1237.0], [80.5, 1238.0], [80.6, 1242.0], [80.7, 1243.0], [80.8, 1244.0], [80.9, 1250.0], [81.0, 1252.0], [81.1, 1252.0], [81.2, 1254.0], [81.3, 1260.0], [81.4, 1272.0], [81.5, 1273.0], [81.6, 1274.0], [81.7, 1285.0], [81.8, 1286.0], [81.9, 1286.0], [82.0, 1286.0], [82.1, 1288.0], [82.2, 1289.0], [82.3, 1293.0], [82.4, 1295.0], [82.5, 1296.0], [82.6, 1296.0], [82.7, 1297.0], [82.8, 1297.0], [82.9, 1305.0], [83.0, 1306.0], [83.1, 1307.0], [83.2, 1310.0], [83.3, 1317.0], [83.4, 1319.0], [83.5, 1327.0], [83.6, 1328.0], [83.7, 1329.0], [83.8, 1332.0], [83.9, 1332.0], [84.0, 1333.0], [84.1, 1336.0], [84.2, 1337.0], [84.3, 1339.0], [84.4, 1339.0], [84.5, 1343.0], [84.6, 1343.0], [84.7, 1354.0], [84.8, 1354.0], [84.9, 1356.0], [85.0, 1356.0], [85.1, 1357.0], [85.2, 1372.0], [85.3, 1377.0], [85.4, 1379.0], [85.5, 1385.0], [85.6, 1390.0], [85.7, 1403.0], [85.8, 1405.0], [85.9, 1407.0], [86.0, 1423.0], [86.1, 1425.0], [86.2, 1425.0], [86.3, 1431.0], [86.4, 1434.0], [86.5, 1437.0], [86.6, 1439.0], [86.7, 1443.0], [86.8, 1444.0], [86.9, 1447.0], [87.0, 1449.0], [87.1, 1456.0], [87.2, 1458.0], [87.3, 1460.0], [87.4, 1474.0], [87.5, 1477.0], [87.6, 1479.0], [87.7, 1485.0], [87.8, 1495.0], [87.9, 1505.0], [88.0, 1506.0], [88.1, 1509.0], [88.2, 1510.0], [88.3, 1526.0], [88.4, 1537.0], [88.5, 1548.0], [88.6, 1553.0], [88.7, 1555.0], [88.8, 1558.0], [88.9, 1572.0], [89.0, 1573.0], [89.1, 1573.0], [89.2, 1576.0], [89.3, 1580.0], [89.4, 1607.0], [89.5, 1629.0], [89.6, 1636.0], [89.7, 1639.0], [89.8, 1640.0], [89.9, 1642.0], [90.0, 1648.0], [90.1, 1655.0], [90.2, 1656.0], [90.3, 1674.0], [90.4, 1676.0], [90.5, 1679.0], [90.6, 1685.0], [90.7, 1690.0], [90.8, 1695.0], [90.9, 1711.0], [91.0, 1736.0], [91.1, 1746.0], [91.2, 1758.0], [91.3, 1776.0], [91.4, 1777.0], [91.5, 1780.0], [91.6, 1781.0], [91.7, 1805.0], [91.8, 1806.0], [91.9, 1828.0], [92.0, 1838.0], [92.1, 1839.0], [92.2, 1847.0], [92.3, 1856.0], [92.4, 1863.0], [92.5, 1884.0], [92.6, 1901.0], [92.7, 1904.0], [92.8, 1912.0], [92.9, 1922.0], [93.0, 1935.0], [93.1, 1954.0], [93.2, 1959.0], [93.3, 1965.0], [93.4, 1970.0], [93.5, 1972.0], [93.6, 1977.0], [93.7, 1980.0], [93.8, 1980.0], [93.9, 1986.0], [94.0, 2005.0], [94.1, 2021.0], [94.2, 2024.0], [94.3, 2024.0], [94.4, 2042.0], [94.5, 2059.0], [94.6, 2064.0], [94.7, 2070.0], [94.8, 2074.0], [94.9, 2075.0], [95.0, 2084.0], [95.1, 2087.0], [95.2, 2118.0], [95.3, 2124.0], [95.4, 2127.0], [95.5, 2145.0], [95.6, 2185.0], [95.7, 2193.0], [95.8, 2206.0], [95.9, 2221.0], [96.0, 2224.0], [96.1, 2234.0], [96.2, 2250.0], [96.3, 2251.0], [96.4, 2252.0], [96.5, 2259.0], [96.6, 2264.0], [96.7, 2276.0], [96.8, 2283.0], [96.9, 2295.0], [97.0, 2357.0], [97.1, 2381.0], [97.2, 2400.0], [97.3, 2463.0], [97.4, 2470.0], [97.5, 2510.0], [97.6, 2523.0], [97.7, 2596.0], [97.8, 2661.0], [97.9, 2662.0], [98.0, 2663.0], [98.1, 2700.0], [98.2, 2792.0], [98.3, 2799.0], [98.4, 2824.0], [98.5, 2908.0], [98.6, 2955.0], [98.7, 2991.0], [98.8, 3025.0], [98.9, 3180.0], [99.0, 3380.0], [99.1, 3447.0], [99.2, 3528.0], [99.3, 3577.0], [99.4, 3679.0], [99.5, 3791.0], [99.6, 3913.0], [99.7, 4039.0], [99.8, 4179.0], [99.9, 5848.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 251.0, "series": [{"data": [[600.0, 19.0], [700.0, 19.0], [800.0, 20.0], [900.0, 16.0], [1000.0, 57.0], [1100.0, 43.0], [1200.0, 19.0], [1300.0, 8.0], [1400.0, 8.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 2.0], [2300.0, 1.0], [2600.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3900.0, 2.0], [300.0, 125.0], [400.0, 176.0], [500.0, 46.0]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[600.0, 27.0], [700.0, 25.0], [800.0, 12.0], [900.0, 23.0], [1000.0, 30.0], [1100.0, 44.0], [1200.0, 22.0], [1300.0, 14.0], [1400.0, 10.0], [1500.0, 9.0], [1600.0, 9.0], [1700.0, 4.0], [1800.0, 5.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 7.0], [2200.0, 4.0], [2300.0, 1.0], [2400.0, 2.0], [2600.0, 3.0], [2800.0, 2.0], [2700.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3900.0, 1.0], [4400.0, 1.0], [400.0, 93.0], [500.0, 38.0]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[600.0, 64.0], [700.0, 53.0], [800.0, 45.0], [900.0, 40.0], [1000.0, 71.0], [1100.0, 89.0], [1200.0, 62.0], [1300.0, 28.0], [1400.0, 22.0], [1500.0, 15.0], [1600.0, 15.0], [1700.0, 8.0], [1800.0, 9.0], [1900.0, 14.0], [2000.0, 12.0], [2100.0, 6.0], [2200.0, 12.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 3.0], [2600.0, 3.0], [2800.0, 1.0], [2700.0, 3.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [300.0, 72.0], [5800.0, 1.0], [400.0, 251.0], [500.0, 82.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1052.0, "series": [{"data": [[0.0, 717.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1052.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 223.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.394312796208524, "minX": 1.65321264E12, "maxY": 18.97449521785336, "series": [{"data": [[1.65321264E12, 18.97449521785336], [1.6532127E12, 18.394312796208524]], "isOverall": false, "label": "Load Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6532127E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 396.0, "minX": 1.0, "maxY": 4647.5, "series": [{"data": [[33.0, 893.3333333333334], [32.0, 1360.5], [34.0, 1499.4], [35.0, 1239.6666666666667], [36.0, 1530.5], [37.0, 1375.0], [39.0, 2603.0], [38.0, 2687.6666666666665], [40.0, 604.0], [43.0, 1578.0], [42.0, 1663.5], [3.0, 415.0], [53.0, 1571.5], [54.0, 3185.3333333333335], [56.0, 2214.0], [4.0, 430.0], [6.0, 402.5], [8.0, 396.0], [9.0, 421.11111111111114], [10.0, 470.02857142857135], [11.0, 411.35135135135135], [12.0, 480.83870967741933], [13.0, 442.9444444444444], [14.0, 481.8947368421053], [15.0, 509.6315789473684], [16.0, 596.2999999999998], [17.0, 772.1], [18.0, 788.5365853658536], [19.0, 801.4418604651164], [20.0, 955.4358974358972], [21.0, 828.3777777777779], [22.0, 972.7692307692308], [23.0, 997.5625000000001], [24.0, 1056.2727272727273], [25.0, 1398.3636363636363], [26.0, 890.3846153846154], [27.0, 1093.7272727272727], [28.0, 1035.4], [29.0, 1247.3333333333335], [30.0, 723.25]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[18.234899328859054, 752.4563758389259]], "isOverall": false, "label": "Create Post-Aggregated", "isController": false}, {"data": [[33.0, 1087.0], [32.0, 1725.3333333333335], [34.0, 1093.0], [35.0, 1939.6], [36.0, 2059.0], [37.0, 1675.0], [38.0, 3658.0], [40.0, 2150.0], [41.0, 2065.5], [42.0, 896.0], [43.0, 2733.5], [44.0, 1377.0], [49.0, 2874.0], [48.0, 1127.0], [50.0, 2098.0], [54.0, 3979.0], [8.0, 484.0], [9.0, 453.73684210526324], [10.0, 641.7142857142858], [11.0, 630.0666666666667], [12.0, 631.2142857142858], [13.0, 647.4615384615383], [14.0, 592.6363636363636], [15.0, 715.9565217391305], [16.0, 759.391304347826], [1.0, 2141.0], [17.0, 901.2941176470588], [18.0, 927.3571428571428], [19.0, 1011.7777777777779], [20.0, 1028.0357142857144], [21.0, 1101.9545454545455], [22.0, 1320.7272727272727], [23.0, 1422.875], [24.0, 1742.25], [25.0, 1111.4], [26.0, 1307.5384615384614], [27.0, 1304.8333333333333], [28.0, 1427.5714285714287], [29.0, 1579.7142857142858], [30.0, 2080.25], [31.0, 1511.6666666666667]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[19.310000000000006, 1012.8924999999999]], "isOverall": false, "label": "Register-Aggregated", "isController": false}, {"data": [[32.0, 1075.7777777777778], [33.0, 1748.0], [2.0, 428.0], [34.0, 1864.6666666666667], [35.0, 1789.2666666666667], [36.0, 1650.8], [37.0, 1830.25], [38.0, 2632.5], [39.0, 2400.0], [41.0, 1814.0], [40.0, 1833.2857142857144], [42.0, 2720.3333333333335], [43.0, 2955.0], [45.0, 3025.0], [50.0, 2494.8], [53.0, 1806.0], [52.0, 1322.5], [54.0, 3779.5], [56.0, 4647.5], [7.0, 397.0], [8.0, 580.0], [9.0, 441.24999999999994], [10.0, 587.5471698113205], [11.0, 547.8571428571429], [12.0, 566.698113207547], [13.0, 603.9473684210526], [14.0, 641.8653846153845], [15.0, 672.9999999999999], [16.0, 748.9999999999999], [1.0, 1128.0], [17.0, 949.8923076923078], [18.0, 864.5166666666669], [19.0, 936.6265060240961], [20.0, 994.5499999999998], [21.0, 1067.509090909091], [22.0, 1055.6521739130435], [23.0, 1083.2777777777776], [24.0, 1228.6499999999999], [25.0, 1212.0], [26.0, 1219.5], [27.0, 1242.7000000000003], [28.0, 1347.2], [29.0, 1542.0625], [30.0, 1577.7857142857144], [31.0, 1529.375]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[18.669000000000022, 929.5520000000008]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 56.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5699.7, "minX": 1.65321264E12, "maxY": 15125.7, "series": [{"data": [[1.65321264E12, 13495.916666666666], [1.6532127E12, 15125.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65321264E12, 5699.7], [1.6532127E12, 6383.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6532127E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 751.0880503144654, "minX": 1.65321264E12, "maxY": 1022.805263157895, "series": [{"data": [[1.65321264E12, 754.0215827338127], [1.6532127E12, 751.0880503144654]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[1.65321264E12, 1022.805263157895], [1.6532127E12, 1003.9238095238095]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.65321264E12, 947.6892177589855], [1.6532127E12, 913.2732447817837]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6532127E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 751.0754716981128, "minX": 1.65321264E12, "maxY": 1022.7368421052632, "series": [{"data": [[1.65321264E12, 753.9820143884893], [1.6532127E12, 751.0754716981128]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[1.65321264E12, 1022.7368421052632], [1.6532127E12, 1003.9000000000011]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.65321264E12, 942.0697674418599], [1.6532127E12, 911.0550284629976]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6532127E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 112.9088050314465, "minX": 1.65321264E12, "maxY": 463.24210526315784, "series": [{"data": [[1.65321264E12, 157.47482014388493], [1.6532127E12, 112.9088050314465]], "isOverall": false, "label": "Create Post", "isController": false}, {"data": [[1.65321264E12, 463.24210526315784], [1.6532127E12, 369.87142857142874]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.65321264E12, 375.16913319238864], [1.6532127E12, 286.96584440227707]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6532127E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 362.0, "minX": 1.65321264E12, "maxY": 5848.0, "series": [{"data": [[1.65321264E12, 5848.0], [1.6532127E12, 3180.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65321264E12, 1771.0], [1.6532127E12, 1485.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65321264E12, 3746.2000000000025], [1.6532127E12, 2167.580000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65321264E12, 2357.0], [1.6532127E12, 1856.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65321264E12, 362.0], [1.6532127E12, 364.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65321264E12, 608.0], [1.6532127E12, 778.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6532127E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 380.0, "minX": 1.0, "maxY": 2108.0, "series": [{"data": [[33.0, 469.0], [32.0, 740.0], [2.0, 781.5], [35.0, 515.0], [36.0, 517.0], [37.0, 658.0], [47.0, 973.0], [46.0, 797.5], [3.0, 845.0], [50.0, 856.5], [57.0, 2108.0], [58.0, 702.5], [5.0, 1146.0], [6.0, 473.0], [7.0, 1071.0], [8.0, 1190.5], [9.0, 1062.0], [10.0, 1195.5], [11.0, 428.0], [12.0, 638.0], [13.0, 714.5], [14.0, 941.5], [15.0, 488.0], [1.0, 1132.0], [16.0, 501.0], [17.0, 953.5], [18.0, 578.0], [19.0, 435.0], [20.0, 897.0], [21.0, 943.0], [22.0, 461.0], [23.0, 903.0], [24.0, 1027.5], [25.0, 454.5], [26.0, 1148.0], [27.0, 1011.0], [28.0, 1079.0], [30.0, 738.5], [31.0, 629.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[22.0, 780.0], [12.0, 380.0], [57.0, 1322.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 58.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2108.0, "series": [{"data": [[33.0, 469.0], [32.0, 740.0], [2.0, 781.5], [35.0, 515.0], [36.0, 517.0], [37.0, 658.0], [47.0, 973.0], [46.0, 797.5], [3.0, 845.0], [50.0, 856.5], [57.0, 2108.0], [58.0, 702.5], [5.0, 1146.0], [6.0, 473.0], [7.0, 1071.0], [8.0, 1190.5], [9.0, 1062.0], [10.0, 1195.5], [11.0, 428.0], [12.0, 638.0], [13.0, 714.5], [14.0, 941.5], [15.0, 488.0], [1.0, 1132.0], [16.0, 501.0], [17.0, 953.5], [18.0, 578.0], [19.0, 435.0], [20.0, 897.0], [21.0, 943.0], [22.0, 461.0], [23.0, 903.0], [24.0, 1027.5], [25.0, 454.5], [26.0, 1148.0], [27.0, 1011.0], [28.0, 1079.0], [30.0, 738.5], [31.0, 629.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[22.0, 0.0], [12.0, 0.0], [57.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 58.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.966666666666667, "minX": 1.65321264E12, "maxY": 17.3, "series": [{"data": [[1.65321264E12, 15.966666666666667], [1.6532127E12, 17.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6532127E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65321264E12, "maxY": 12.25, "series": [{"data": [[1.65321264E12, 11.016666666666667], [1.6532127E12, 12.25]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65321264E12, 4.633333333333334], [1.6532127E12, 5.3]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.65321264E12, 0.03333333333333333], [1.6532127E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6532127E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65321264E12, "maxY": 8.75, "series": [{"data": [[1.65321264E12, 3.1666666666666665], [1.6532127E12, 3.5]], "isOverall": false, "label": "Register-success", "isController": false}, {"data": [[1.65321264E12, 4.633333333333334], [1.6532127E12, 5.3]], "isOverall": false, "label": "Create Post-success", "isController": false}, {"data": [[1.65321264E12, 7.85], [1.6532127E12, 8.75]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.65321264E12, 0.03333333333333333], [1.6532127E12, 0.03333333333333333]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6532127E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65321264E12, "maxY": 17.55, "series": [{"data": [[1.65321264E12, 15.65], [1.6532127E12, 17.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65321264E12, 0.03333333333333333], [1.6532127E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6532127E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

