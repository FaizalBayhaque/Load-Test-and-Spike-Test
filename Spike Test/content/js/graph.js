/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 437.0, "minX": 0.0, "maxY": 17191.0, "series": [{"data": [[0.0, 437.0], [0.1, 441.0], [0.2, 443.0], [0.3, 443.0], [0.4, 444.0], [0.5, 444.0], [0.6, 444.0], [0.7, 449.0], [0.8, 450.0], [0.9, 451.0], [1.0, 451.0], [1.1, 452.0], [1.2, 452.0], [1.3, 454.0], [1.4, 455.0], [1.5, 456.0], [1.6, 456.0], [1.7, 457.0], [1.8, 458.0], [1.9, 458.0], [2.0, 459.0], [2.1, 459.0], [2.2, 459.0], [2.3, 461.0], [2.4, 462.0], [2.5, 462.0], [2.6, 464.0], [2.7, 465.0], [2.8, 465.0], [2.9, 466.0], [3.0, 466.0], [3.1, 467.0], [3.2, 468.0], [3.3, 470.0], [3.4, 471.0], [3.5, 472.0], [3.6, 472.0], [3.7, 472.0], [3.8, 473.0], [3.9, 473.0], [4.0, 474.0], [4.1, 474.0], [4.2, 475.0], [4.3, 475.0], [4.4, 476.0], [4.5, 477.0], [4.6, 477.0], [4.7, 477.0], [4.8, 478.0], [4.9, 478.0], [5.0, 478.0], [5.1, 478.0], [5.2, 479.0], [5.3, 479.0], [5.4, 479.0], [5.5, 482.0], [5.6, 482.0], [5.7, 483.0], [5.8, 485.0], [5.9, 485.0], [6.0, 486.0], [6.1, 486.0], [6.2, 486.0], [6.3, 487.0], [6.4, 487.0], [6.5, 487.0], [6.6, 488.0], [6.7, 489.0], [6.8, 489.0], [6.9, 489.0], [7.0, 489.0], [7.1, 490.0], [7.2, 491.0], [7.3, 491.0], [7.4, 491.0], [7.5, 492.0], [7.6, 492.0], [7.7, 493.0], [7.8, 493.0], [7.9, 493.0], [8.0, 493.0], [8.1, 493.0], [8.2, 493.0], [8.3, 493.0], [8.4, 493.0], [8.5, 493.0], [8.6, 494.0], [8.7, 495.0], [8.8, 495.0], [8.9, 495.0], [9.0, 496.0], [9.1, 496.0], [9.2, 496.0], [9.3, 497.0], [9.4, 497.0], [9.5, 498.0], [9.6, 499.0], [9.7, 499.0], [9.8, 499.0], [9.9, 500.0], [10.0, 500.0], [10.1, 500.0], [10.2, 500.0], [10.3, 501.0], [10.4, 501.0], [10.5, 501.0], [10.6, 501.0], [10.7, 502.0], [10.8, 503.0], [10.9, 503.0], [11.0, 503.0], [11.1, 503.0], [11.2, 503.0], [11.3, 504.0], [11.4, 504.0], [11.5, 504.0], [11.6, 504.0], [11.7, 505.0], [11.8, 506.0], [11.9, 506.0], [12.0, 506.0], [12.1, 506.0], [12.2, 507.0], [12.3, 507.0], [12.4, 507.0], [12.5, 508.0], [12.6, 508.0], [12.7, 509.0], [12.8, 510.0], [12.9, 511.0], [13.0, 511.0], [13.1, 512.0], [13.2, 512.0], [13.3, 513.0], [13.4, 513.0], [13.5, 514.0], [13.6, 514.0], [13.7, 515.0], [13.8, 515.0], [13.9, 515.0], [14.0, 515.0], [14.1, 515.0], [14.2, 516.0], [14.3, 516.0], [14.4, 516.0], [14.5, 516.0], [14.6, 517.0], [14.7, 517.0], [14.8, 517.0], [14.9, 517.0], [15.0, 517.0], [15.1, 518.0], [15.2, 518.0], [15.3, 519.0], [15.4, 519.0], [15.5, 520.0], [15.6, 521.0], [15.7, 521.0], [15.8, 521.0], [15.9, 522.0], [16.0, 523.0], [16.1, 524.0], [16.2, 524.0], [16.3, 524.0], [16.4, 524.0], [16.5, 524.0], [16.6, 524.0], [16.7, 525.0], [16.8, 526.0], [16.9, 526.0], [17.0, 527.0], [17.1, 527.0], [17.2, 527.0], [17.3, 529.0], [17.4, 529.0], [17.5, 530.0], [17.6, 530.0], [17.7, 530.0], [17.8, 531.0], [17.9, 531.0], [18.0, 532.0], [18.1, 533.0], [18.2, 533.0], [18.3, 533.0], [18.4, 533.0], [18.5, 533.0], [18.6, 534.0], [18.7, 534.0], [18.8, 535.0], [18.9, 535.0], [19.0, 536.0], [19.1, 536.0], [19.2, 536.0], [19.3, 537.0], [19.4, 537.0], [19.5, 537.0], [19.6, 538.0], [19.7, 538.0], [19.8, 539.0], [19.9, 539.0], [20.0, 539.0], [20.1, 540.0], [20.2, 540.0], [20.3, 541.0], [20.4, 541.0], [20.5, 542.0], [20.6, 543.0], [20.7, 543.0], [20.8, 543.0], [20.9, 543.0], [21.0, 544.0], [21.1, 545.0], [21.2, 545.0], [21.3, 547.0], [21.4, 547.0], [21.5, 547.0], [21.6, 548.0], [21.7, 549.0], [21.8, 549.0], [21.9, 550.0], [22.0, 550.0], [22.1, 551.0], [22.2, 551.0], [22.3, 551.0], [22.4, 551.0], [22.5, 551.0], [22.6, 551.0], [22.7, 552.0], [22.8, 552.0], [22.9, 553.0], [23.0, 553.0], [23.1, 554.0], [23.2, 555.0], [23.3, 555.0], [23.4, 555.0], [23.5, 556.0], [23.6, 557.0], [23.7, 557.0], [23.8, 558.0], [23.9, 559.0], [24.0, 559.0], [24.1, 559.0], [24.2, 559.0], [24.3, 561.0], [24.4, 562.0], [24.5, 562.0], [24.6, 563.0], [24.7, 564.0], [24.8, 565.0], [24.9, 565.0], [25.0, 566.0], [25.1, 566.0], [25.2, 566.0], [25.3, 568.0], [25.4, 569.0], [25.5, 570.0], [25.6, 570.0], [25.7, 571.0], [25.8, 572.0], [25.9, 572.0], [26.0, 572.0], [26.1, 573.0], [26.2, 573.0], [26.3, 573.0], [26.4, 573.0], [26.5, 574.0], [26.6, 576.0], [26.7, 576.0], [26.8, 576.0], [26.9, 576.0], [27.0, 577.0], [27.1, 578.0], [27.2, 579.0], [27.3, 579.0], [27.4, 579.0], [27.5, 579.0], [27.6, 579.0], [27.7, 579.0], [27.8, 580.0], [27.9, 581.0], [28.0, 581.0], [28.1, 582.0], [28.2, 582.0], [28.3, 582.0], [28.4, 583.0], [28.5, 583.0], [28.6, 583.0], [28.7, 583.0], [28.8, 583.0], [28.9, 584.0], [29.0, 585.0], [29.1, 585.0], [29.2, 586.0], [29.3, 586.0], [29.4, 588.0], [29.5, 588.0], [29.6, 588.0], [29.7, 588.0], [29.8, 589.0], [29.9, 589.0], [30.0, 589.0], [30.1, 591.0], [30.2, 591.0], [30.3, 591.0], [30.4, 592.0], [30.5, 592.0], [30.6, 593.0], [30.7, 593.0], [30.8, 596.0], [30.9, 596.0], [31.0, 596.0], [31.1, 597.0], [31.2, 598.0], [31.3, 598.0], [31.4, 598.0], [31.5, 599.0], [31.6, 599.0], [31.7, 603.0], [31.8, 603.0], [31.9, 603.0], [32.0, 603.0], [32.1, 604.0], [32.2, 604.0], [32.3, 605.0], [32.4, 606.0], [32.5, 607.0], [32.6, 607.0], [32.7, 608.0], [32.8, 612.0], [32.9, 616.0], [33.0, 618.0], [33.1, 618.0], [33.2, 619.0], [33.3, 619.0], [33.4, 620.0], [33.5, 620.0], [33.6, 621.0], [33.7, 623.0], [33.8, 624.0], [33.9, 627.0], [34.0, 629.0], [34.1, 631.0], [34.2, 639.0], [34.3, 640.0], [34.4, 641.0], [34.5, 641.0], [34.6, 641.0], [34.7, 643.0], [34.8, 644.0], [34.9, 645.0], [35.0, 647.0], [35.1, 649.0], [35.2, 649.0], [35.3, 651.0], [35.4, 651.0], [35.5, 655.0], [35.6, 656.0], [35.7, 656.0], [35.8, 658.0], [35.9, 666.0], [36.0, 666.0], [36.1, 667.0], [36.2, 669.0], [36.3, 672.0], [36.4, 681.0], [36.5, 681.0], [36.6, 684.0], [36.7, 686.0], [36.8, 686.0], [36.9, 691.0], [37.0, 704.0], [37.1, 705.0], [37.2, 706.0], [37.3, 717.0], [37.4, 718.0], [37.5, 719.0], [37.6, 721.0], [37.7, 729.0], [37.8, 729.0], [37.9, 730.0], [38.0, 731.0], [38.1, 732.0], [38.2, 733.0], [38.3, 737.0], [38.4, 737.0], [38.5, 739.0], [38.6, 741.0], [38.7, 744.0], [38.8, 746.0], [38.9, 746.0], [39.0, 747.0], [39.1, 749.0], [39.2, 750.0], [39.3, 750.0], [39.4, 751.0], [39.5, 754.0], [39.6, 756.0], [39.7, 758.0], [39.8, 758.0], [39.9, 760.0], [40.0, 762.0], [40.1, 763.0], [40.2, 765.0], [40.3, 766.0], [40.4, 766.0], [40.5, 768.0], [40.6, 768.0], [40.7, 769.0], [40.8, 770.0], [40.9, 771.0], [41.0, 772.0], [41.1, 775.0], [41.2, 777.0], [41.3, 777.0], [41.4, 777.0], [41.5, 778.0], [41.6, 778.0], [41.7, 782.0], [41.8, 783.0], [41.9, 794.0], [42.0, 798.0], [42.1, 799.0], [42.2, 801.0], [42.3, 812.0], [42.4, 813.0], [42.5, 813.0], [42.6, 813.0], [42.7, 814.0], [42.8, 815.0], [42.9, 818.0], [43.0, 819.0], [43.1, 823.0], [43.2, 824.0], [43.3, 831.0], [43.4, 832.0], [43.5, 835.0], [43.6, 841.0], [43.7, 843.0], [43.8, 844.0], [43.9, 848.0], [44.0, 852.0], [44.1, 852.0], [44.2, 865.0], [44.3, 867.0], [44.4, 875.0], [44.5, 879.0], [44.6, 879.0], [44.7, 879.0], [44.8, 880.0], [44.9, 881.0], [45.0, 884.0], [45.1, 884.0], [45.2, 885.0], [45.3, 888.0], [45.4, 889.0], [45.5, 889.0], [45.6, 889.0], [45.7, 896.0], [45.8, 898.0], [45.9, 899.0], [46.0, 899.0], [46.1, 900.0], [46.2, 901.0], [46.3, 902.0], [46.4, 918.0], [46.5, 918.0], [46.6, 920.0], [46.7, 920.0], [46.8, 924.0], [46.9, 925.0], [47.0, 927.0], [47.1, 927.0], [47.2, 930.0], [47.3, 932.0], [47.4, 933.0], [47.5, 933.0], [47.6, 933.0], [47.7, 933.0], [47.8, 935.0], [47.9, 936.0], [48.0, 937.0], [48.1, 938.0], [48.2, 938.0], [48.3, 938.0], [48.4, 947.0], [48.5, 948.0], [48.6, 949.0], [48.7, 952.0], [48.8, 954.0], [48.9, 957.0], [49.0, 958.0], [49.1, 959.0], [49.2, 964.0], [49.3, 965.0], [49.4, 971.0], [49.5, 972.0], [49.6, 994.0], [49.7, 997.0], [49.8, 1000.0], [49.9, 1015.0], [50.0, 1016.0], [50.1, 1018.0], [50.2, 1019.0], [50.3, 1025.0], [50.4, 1028.0], [50.5, 1029.0], [50.6, 1029.0], [50.7, 1029.0], [50.8, 1035.0], [50.9, 1051.0], [51.0, 1053.0], [51.1, 1059.0], [51.2, 1063.0], [51.3, 1065.0], [51.4, 1078.0], [51.5, 1087.0], [51.6, 1112.0], [51.7, 1121.0], [51.8, 1126.0], [51.9, 1128.0], [52.0, 1128.0], [52.1, 1134.0], [52.2, 1135.0], [52.3, 1138.0], [52.4, 1144.0], [52.5, 1145.0], [52.6, 1153.0], [52.7, 1153.0], [52.8, 1153.0], [52.9, 1156.0], [53.0, 1161.0], [53.1, 1162.0], [53.2, 1168.0], [53.3, 1179.0], [53.4, 1194.0], [53.5, 1199.0], [53.6, 1202.0], [53.7, 1228.0], [53.8, 1243.0], [53.9, 1257.0], [54.0, 1260.0], [54.1, 1260.0], [54.2, 1260.0], [54.3, 1262.0], [54.4, 1267.0], [54.5, 1270.0], [54.6, 1280.0], [54.7, 1295.0], [54.8, 1297.0], [54.9, 1298.0], [55.0, 1301.0], [55.1, 1301.0], [55.2, 1306.0], [55.3, 1307.0], [55.4, 1308.0], [55.5, 1310.0], [55.6, 1311.0], [55.7, 1313.0], [55.8, 1322.0], [55.9, 1324.0], [56.0, 1369.0], [56.1, 1379.0], [56.2, 1386.0], [56.3, 1412.0], [56.4, 1415.0], [56.5, 1417.0], [56.6, 1434.0], [56.7, 1440.0], [56.8, 1459.0], [56.9, 1466.0], [57.0, 1471.0], [57.1, 1473.0], [57.2, 1477.0], [57.3, 1478.0], [57.4, 1483.0], [57.5, 1485.0], [57.6, 1487.0], [57.7, 1488.0], [57.8, 1492.0], [57.9, 1493.0], [58.0, 1495.0], [58.1, 1496.0], [58.2, 1504.0], [58.3, 1505.0], [58.4, 1515.0], [58.5, 1517.0], [58.6, 1518.0], [58.7, 1518.0], [58.8, 1519.0], [58.9, 1520.0], [59.0, 1521.0], [59.1, 1521.0], [59.2, 1523.0], [59.3, 1526.0], [59.4, 1527.0], [59.5, 1528.0], [59.6, 1530.0], [59.7, 1531.0], [59.8, 1533.0], [59.9, 1534.0], [60.0, 1536.0], [60.1, 1539.0], [60.2, 1539.0], [60.3, 1548.0], [60.4, 1549.0], [60.5, 1552.0], [60.6, 1567.0], [60.7, 1586.0], [60.8, 1586.0], [60.9, 1588.0], [61.0, 1588.0], [61.1, 1620.0], [61.2, 1675.0], [61.3, 1740.0], [61.4, 1757.0], [61.5, 1765.0], [61.6, 1767.0], [61.7, 1767.0], [61.8, 1773.0], [61.9, 1808.0], [62.0, 1811.0], [62.1, 1829.0], [62.2, 1848.0], [62.3, 1876.0], [62.4, 1917.0], [62.5, 1942.0], [62.6, 1947.0], [62.7, 1983.0], [62.8, 1986.0], [62.9, 1997.0], [63.0, 2025.0], [63.1, 2026.0], [63.2, 2026.0], [63.3, 2027.0], [63.4, 2028.0], [63.5, 2030.0], [63.6, 2031.0], [63.7, 2034.0], [63.8, 2039.0], [63.9, 2041.0], [64.0, 2044.0], [64.1, 2050.0], [64.2, 2051.0], [64.3, 2052.0], [64.4, 2056.0], [64.5, 2056.0], [64.6, 2062.0], [64.7, 2068.0], [64.8, 2068.0], [64.9, 2081.0], [65.0, 2082.0], [65.1, 2084.0], [65.2, 2105.0], [65.3, 2117.0], [65.4, 2131.0], [65.5, 2135.0], [65.6, 2137.0], [65.7, 2139.0], [65.8, 2139.0], [65.9, 2141.0], [66.0, 2144.0], [66.1, 2153.0], [66.2, 2155.0], [66.3, 2165.0], [66.4, 2198.0], [66.5, 2220.0], [66.6, 2229.0], [66.7, 2231.0], [66.8, 2231.0], [66.9, 2233.0], [67.0, 2238.0], [67.1, 2238.0], [67.2, 2244.0], [67.3, 2246.0], [67.4, 2268.0], [67.5, 2274.0], [67.6, 2279.0], [67.7, 2288.0], [67.8, 2293.0], [67.9, 2293.0], [68.0, 2294.0], [68.1, 2295.0], [68.2, 2298.0], [68.3, 2298.0], [68.4, 2301.0], [68.5, 2302.0], [68.6, 2304.0], [68.7, 2310.0], [68.8, 2314.0], [68.9, 2322.0], [69.0, 2325.0], [69.1, 2334.0], [69.2, 2341.0], [69.3, 2345.0], [69.4, 2346.0], [69.5, 2365.0], [69.6, 2380.0], [69.7, 2385.0], [69.8, 2387.0], [69.9, 2388.0], [70.0, 2394.0], [70.1, 2398.0], [70.2, 2410.0], [70.3, 2411.0], [70.4, 2417.0], [70.5, 2419.0], [70.6, 2425.0], [70.7, 2427.0], [70.8, 2429.0], [70.9, 2430.0], [71.0, 2431.0], [71.1, 2435.0], [71.2, 2456.0], [71.3, 2460.0], [71.4, 2466.0], [71.5, 2469.0], [71.6, 2469.0], [71.7, 2485.0], [71.8, 2505.0], [71.9, 2505.0], [72.0, 2508.0], [72.1, 2509.0], [72.2, 2510.0], [72.3, 2519.0], [72.4, 2524.0], [72.5, 2526.0], [72.6, 2534.0], [72.7, 2538.0], [72.8, 2543.0], [72.9, 2548.0], [73.0, 2560.0], [73.1, 2573.0], [73.2, 2579.0], [73.3, 2582.0], [73.4, 2602.0], [73.5, 2612.0], [73.6, 2616.0], [73.7, 2619.0], [73.8, 2620.0], [73.9, 2622.0], [74.0, 2622.0], [74.1, 2635.0], [74.2, 2642.0], [74.3, 2659.0], [74.4, 2660.0], [74.5, 2665.0], [74.6, 2688.0], [74.7, 2694.0], [74.8, 2699.0], [74.9, 2703.0], [75.0, 2709.0], [75.1, 2710.0], [75.2, 2711.0], [75.3, 2712.0], [75.4, 2723.0], [75.5, 2735.0], [75.6, 2739.0], [75.7, 2740.0], [75.8, 2749.0], [75.9, 2753.0], [76.0, 2764.0], [76.1, 2766.0], [76.2, 2773.0], [76.3, 2778.0], [76.4, 2790.0], [76.5, 2794.0], [76.6, 2796.0], [76.7, 2802.0], [76.8, 2804.0], [76.9, 2808.0], [77.0, 2808.0], [77.1, 2809.0], [77.2, 2811.0], [77.3, 2822.0], [77.4, 2823.0], [77.5, 2825.0], [77.6, 2826.0], [77.7, 2828.0], [77.8, 2829.0], [77.9, 2831.0], [78.0, 2837.0], [78.1, 2842.0], [78.2, 2844.0], [78.3, 2851.0], [78.4, 2857.0], [78.5, 2887.0], [78.6, 2894.0], [78.7, 2906.0], [78.8, 2909.0], [78.9, 2912.0], [79.0, 2924.0], [79.1, 2927.0], [79.2, 2962.0], [79.3, 2973.0], [79.4, 2982.0], [79.5, 2985.0], [79.6, 2993.0], [79.7, 3008.0], [79.8, 3025.0], [79.9, 3072.0], [80.0, 3078.0], [80.1, 3079.0], [80.2, 3082.0], [80.3, 3096.0], [80.4, 3100.0], [80.5, 3121.0], [80.6, 3124.0], [80.7, 3187.0], [80.8, 3197.0], [80.9, 3212.0], [81.0, 3239.0], [81.1, 3242.0], [81.2, 3247.0], [81.3, 3248.0], [81.4, 3288.0], [81.5, 3343.0], [81.6, 3350.0], [81.7, 3382.0], [81.8, 3390.0], [81.9, 3394.0], [82.0, 3466.0], [82.1, 3480.0], [82.2, 3506.0], [82.3, 3517.0], [82.4, 3529.0], [82.5, 3546.0], [82.6, 3560.0], [82.7, 3570.0], [82.8, 3571.0], [82.9, 3580.0], [83.0, 3589.0], [83.1, 3607.0], [83.2, 3635.0], [83.3, 3650.0], [83.4, 3654.0], [83.5, 3663.0], [83.6, 3665.0], [83.7, 3686.0], [83.8, 3686.0], [83.9, 3686.0], [84.0, 3699.0], [84.1, 3711.0], [84.2, 3732.0], [84.3, 3769.0], [84.4, 3785.0], [84.5, 3808.0], [84.6, 3823.0], [84.7, 3824.0], [84.8, 3843.0], [84.9, 3854.0], [85.0, 3860.0], [85.1, 3866.0], [85.2, 3870.0], [85.3, 3895.0], [85.4, 3938.0], [85.5, 3945.0], [85.6, 3981.0], [85.7, 3986.0], [85.8, 4012.0], [85.9, 4013.0], [86.0, 4014.0], [86.1, 4020.0], [86.2, 4028.0], [86.3, 4041.0], [86.4, 4070.0], [86.5, 4074.0], [86.6, 4090.0], [86.7, 4106.0], [86.8, 4108.0], [86.9, 4114.0], [87.0, 4116.0], [87.1, 4119.0], [87.2, 4131.0], [87.3, 4153.0], [87.4, 4155.0], [87.5, 4208.0], [87.6, 4212.0], [87.7, 4212.0], [87.8, 4214.0], [87.9, 4217.0], [88.0, 4223.0], [88.1, 4228.0], [88.2, 4238.0], [88.3, 4250.0], [88.4, 4250.0], [88.5, 4262.0], [88.6, 4265.0], [88.7, 4274.0], [88.8, 4275.0], [88.9, 4321.0], [89.0, 4328.0], [89.1, 4329.0], [89.2, 4333.0], [89.3, 4339.0], [89.4, 4341.0], [89.5, 4346.0], [89.6, 4351.0], [89.7, 4352.0], [89.8, 4365.0], [89.9, 4370.0], [90.0, 4376.0], [90.1, 4382.0], [90.2, 4387.0], [90.3, 4398.0], [90.4, 4414.0], [90.5, 4415.0], [90.6, 4435.0], [90.7, 4442.0], [90.8, 4484.0], [90.9, 4486.0], [91.0, 4487.0], [91.1, 4500.0], [91.2, 4517.0], [91.3, 4519.0], [91.4, 4521.0], [91.5, 4539.0], [91.6, 4545.0], [91.7, 4554.0], [91.8, 4557.0], [91.9, 4561.0], [92.0, 4569.0], [92.1, 4592.0], [92.2, 4635.0], [92.3, 4652.0], [92.4, 4669.0], [92.5, 4705.0], [92.6, 4705.0], [92.7, 4709.0], [92.8, 4715.0], [92.9, 4719.0], [93.0, 4738.0], [93.1, 4742.0], [93.2, 4825.0], [93.3, 4858.0], [93.4, 4868.0], [93.5, 4880.0], [93.6, 4881.0], [93.7, 4888.0], [93.8, 4915.0], [93.9, 4919.0], [94.0, 4932.0], [94.1, 4943.0], [94.2, 4978.0], [94.3, 4980.0], [94.4, 4989.0], [94.5, 4998.0], [94.6, 5005.0], [94.7, 5017.0], [94.8, 5028.0], [94.9, 5069.0], [95.0, 5073.0], [95.1, 5082.0], [95.2, 5133.0], [95.3, 5157.0], [95.4, 5161.0], [95.5, 5166.0], [95.6, 5167.0], [95.7, 5176.0], [95.8, 5233.0], [95.9, 5261.0], [96.0, 5380.0], [96.1, 5395.0], [96.2, 5408.0], [96.3, 5412.0], [96.4, 5449.0], [96.5, 5545.0], [96.6, 5560.0], [96.7, 5619.0], [96.8, 5634.0], [96.9, 5713.0], [97.0, 5731.0], [97.1, 5751.0], [97.2, 5771.0], [97.3, 5795.0], [97.4, 5804.0], [97.5, 5828.0], [97.6, 5849.0], [97.7, 5872.0], [97.8, 5896.0], [97.9, 5919.0], [98.0, 6040.0], [98.1, 6105.0], [98.2, 6180.0], [98.3, 6318.0], [98.4, 6341.0], [98.5, 6349.0], [98.6, 6422.0], [98.7, 6457.0], [98.8, 6475.0], [98.9, 6528.0], [99.0, 6619.0], [99.1, 6620.0], [99.2, 6737.0], [99.3, 6741.0], [99.4, 6765.0], [99.5, 6802.0], [99.6, 6873.0], [99.7, 6962.0], [99.8, 6969.0], [99.9, 17191.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 217.0, "series": [{"data": [[600.0, 53.0], [700.0, 52.0], [800.0, 39.0], [900.0, 37.0], [1000.0, 18.0], [1100.0, 20.0], [1200.0, 14.0], [1300.0, 13.0], [1400.0, 19.0], [1500.0, 29.0], [1600.0, 2.0], [1700.0, 6.0], [1800.0, 5.0], [1900.0, 6.0], [2000.0, 22.0], [2100.0, 13.0], [2200.0, 19.0], [2300.0, 18.0], [2400.0, 16.0], [2500.0, 17.0], [2600.0, 15.0], [2700.0, 18.0], [2800.0, 20.0], [2900.0, 10.0], [3000.0, 7.0], [3100.0, 5.0], [3200.0, 6.0], [3300.0, 5.0], [3400.0, 2.0], [3500.0, 9.0], [3700.0, 4.0], [3600.0, 10.0], [3800.0, 9.0], [3900.0, 4.0], [4000.0, 9.0], [4300.0, 15.0], [4200.0, 14.0], [4100.0, 8.0], [4400.0, 7.0], [4500.0, 11.0], [4600.0, 3.0], [4800.0, 6.0], [4700.0, 7.0], [5000.0, 6.0], [4900.0, 8.0], [5100.0, 6.0], [5200.0, 2.0], [5300.0, 2.0], [5600.0, 2.0], [5400.0, 3.0], [5500.0, 2.0], [5700.0, 5.0], [5800.0, 5.0], [6000.0, 1.0], [6100.0, 2.0], [5900.0, 1.0], [6300.0, 3.0], [6500.0, 1.0], [6600.0, 2.0], [6400.0, 3.0], [6700.0, 3.0], [6800.0, 2.0], [6900.0, 2.0], [17100.0, 1.0], [400.0, 99.0], [500.0, 217.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 103.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 478.0, "series": [{"data": [[0.0, 103.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 478.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 419.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 232.151, "minX": 1.65319674E12, "maxY": 232.151, "series": [{"data": [[1.65319674E12, 232.151]], "isOverall": false, "label": "Spike Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65319674E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 437.0, "minX": 1.0, "maxY": 17191.0, "series": [{"data": [[2.0, 5073.0], [3.0, 1473.0], [4.0, 1528.0], [5.0, 1488.0], [6.0, 1530.0], [7.0, 1586.0], [8.0, 1567.0], [10.0, 1459.0], [11.0, 1496.0], [12.0, 2288.0], [13.0, 1492.0], [14.0, 1386.0], [15.0, 2298.0], [16.0, 508.0], [17.0, 470.0], [18.0, 2027.0], [19.0, 444.0], [21.0, 453.5], [24.0, 493.6666666666667], [25.0, 444.0], [26.0, 437.0], [27.0, 486.0], [28.0, 719.0], [29.0, 471.0], [30.0, 452.0], [31.0, 493.0], [33.0, 823.0], [32.0, 794.0], [37.0, 443.0], [36.0, 581.0], [39.0, 1487.0], [38.0, 485.0], [41.0, 691.0], [40.0, 1534.0], [43.0, 459.0], [42.0, 461.0], [45.0, 459.0], [44.0, 456.0], [47.0, 495.0], [46.0, 451.0], [49.0, 1548.0], [51.0, 507.0], [50.0, 1505.5], [53.0, 1533.0], [52.0, 1549.0], [55.0, 1527.0], [54.0, 477.0], [57.0, 972.0], [56.0, 1523.0], [59.0, 1531.0], [58.0, 1518.0], [61.0, 1526.0], [60.0, 775.0], [63.0, 1010.5], [67.0, 489.0], [66.0, 1521.0], [65.0, 503.0], [64.0, 1520.0], [71.0, 477.0], [70.0, 513.0], [69.0, 525.0], [68.0, 493.0], [75.0, 608.0], [74.0, 486.0], [73.0, 505.0], [72.0, 482.0], [78.0, 852.0], [77.0, 673.0], [83.0, 563.3333333333335], [82.0, 709.2], [81.0, 509.4], [80.0, 669.0], [87.0, 730.9090909090909], [86.0, 527.9000000000001], [85.0, 569.25], [84.0, 664.625], [91.0, 779.0], [90.0, 681.1428571428571], [89.0, 750.4], [88.0, 799.4374999999999], [95.0, 596.0], [94.0, 682.75], [93.0, 889.0], [92.0, 1002.6666666666667], [98.0, 752.0], [99.0, 473.0], [97.0, 604.0], [96.0, 603.0], [103.0, 676.6666666666666], [101.0, 570.3333333333334], [100.0, 566.0], [106.0, 524.5], [107.0, 519.0], [104.0, 531.0], [111.0, 478.0], [110.0, 507.4], [109.0, 919.75], [115.0, 1260.0], [114.0, 1168.0], [113.0, 500.0], [112.0, 1260.0], [119.0, 981.5], [118.0, 596.25], [117.0, 679.5], [116.0, 843.0], [123.0, 648.875], [122.0, 656.0], [121.0, 838.5], [120.0, 769.0], [125.0, 927.6666666666666], [124.0, 662.3333333333334], [126.0, 757.5], [135.0, 738.4285714285714], [133.0, 707.1666666666667], [132.0, 814.375], [134.0, 725.5], [131.0, 624.0], [129.0, 591.0], [128.0, 816.375], [130.0, 655.0], [142.0, 792.5], [140.0, 762.3333333333334], [139.0, 812.0], [138.0, 891.0], [137.0, 680.0], [143.0, 717.5], [136.0, 673.5], [151.0, 957.0], [150.0, 772.0], [149.0, 588.0], [148.0, 768.0], [147.0, 777.0], [146.0, 783.0], [145.0, 1015.0], [144.0, 620.5], [158.0, 602.5], [157.0, 670.4], [156.0, 540.5555555555555], [155.0, 542.0], [154.0, 736.75], [153.0, 590.0], [152.0, 554.75], [159.0, 614.3333333333334], [167.0, 547.25], [166.0, 555.0], [165.0, 592.0], [164.0, 667.0], [163.0, 642.4], [161.0, 582.0], [160.0, 612.5], [162.0, 712.0], [175.0, 903.6], [174.0, 568.0], [173.0, 567.5], [172.0, 564.5], [171.0, 588.0], [170.0, 550.5], [169.0, 542.6666666666666], [168.0, 565.0], [183.0, 2374.0], [182.0, 2064.0], [180.0, 2071.0], [179.0, 2069.0], [178.0, 2212.2], [177.0, 1606.5], [181.0, 1304.5], [176.0, 941.0], [191.0, 1556.7142857142858], [188.0, 1689.75], [186.0, 2487.3333333333335], [190.0, 1905.0], [189.0, 2810.5], [187.0, 1833.5], [184.0, 2060.5], [185.0, 2121.5], [197.0, 2198.3333333333335], [196.0, 1519.0], [195.0, 1174.8], [192.0, 2013.75], [193.0, 2117.25], [199.0, 2042.6666666666667], [194.0, 1810.0], [207.0, 1460.25], [206.0, 1964.75], [204.0, 2088.6], [203.0, 3656.5], [202.0, 3121.0], [201.0, 2367.0], [200.0, 2266.6666666666665], [214.0, 3018.0], [213.0, 4173.0], [212.0, 2053.4], [210.0, 1846.0], [215.0, 2430.0], [211.0, 918.0], [209.0, 930.0], [208.0, 2505.0], [223.0, 6969.0], [221.0, 6457.0], [218.0, 3866.0], [217.0, 5902.666666666667], [229.0, 5146.666666666667], [227.0, 4085.6666666666665], [226.0, 4899.333333333333], [225.0, 3870.0], [224.0, 5896.0], [239.0, 6475.0], [238.0, 5296.0], [236.0, 6802.0], [234.0, 5096.0], [233.0, 6180.0], [232.0, 6541.0], [247.0, 1135.0], [246.0, 2962.0], [245.0, 1148.5], [244.0, 1161.0], [243.0, 2811.0], [242.0, 1145.0], [240.0, 1156.0], [254.0, 1440.0], [253.0, 2394.0], [252.0, 1725.5], [255.0, 1138.0], [251.0, 2753.0], [250.0, 2173.0], [249.0, 2709.0], [269.0, 1625.0], [270.0, 1170.5], [268.0, 1237.0], [258.0, 1452.1666666666667], [256.0, 1283.4], [257.0, 2610.25], [259.0, 1847.0], [271.0, 1191.6666666666667], [266.0, 1202.0], [267.0, 537.0], [264.0, 608.0], [263.0, 1718.0], [261.0, 2211.25], [262.0, 3084.5], [260.0, 1629.0], [286.0, 2660.7], [287.0, 694.5], [285.0, 1453.5], [284.0, 3390.0], [275.0, 2102.4285714285716], [274.0, 1777.0], [273.0, 1124.3333333333333], [272.0, 1266.0], [279.0, 1595.5], [278.0, 2587.0], [283.0, 507.0], [282.0, 2243.6666666666665], [281.0, 3660.5], [280.0, 1191.5], [277.0, 1884.0], [276.0, 1941.0], [302.0, 2030.0], [303.0, 2026.0], [301.0, 2159.0], [300.0, 704.0], [291.0, 4992.25], [290.0, 1448.0], [289.0, 2484.0], [295.0, 6528.0], [288.0, 4315.333333333333], [299.0, 3851.0], [298.0, 2526.75], [296.0, 2150.6666666666665], [297.0, 5804.0], [294.0, 2961.0], [293.0, 2374.25], [292.0, 1409.5], [317.0, 540.0], [319.0, 3664.5], [318.0, 1956.7500000000002], [315.0, 3708.6666666666665], [316.0, 497.0], [307.0, 558.3333333333334], [306.0, 2214.0], [305.0, 2147.166666666667], [304.0, 5412.0], [313.0, 1536.0], [312.0, 1505.0], [311.0, 1504.0], [310.0, 472.0], [309.0, 516.8], [308.0, 603.0], [323.0, 1193.5], [334.0, 3863.0], [332.0, 2135.0], [331.0, 501.0], [330.0, 1902.5], [329.0, 992.6], [326.0, 4554.0], [325.0, 2090.5], [324.0, 509.0], [322.0, 3463.75], [321.0, 957.0], [327.0, 1260.0], [320.0, 1852.5], [349.0, 4414.0], [347.0, 547.0], [346.0, 2002.5], [348.0, 739.0], [339.0, 599.0], [337.0, 3408.0], [336.0, 4868.0], [345.0, 958.0], [344.0, 551.0], [343.0, 583.5], [342.0, 1000.0], [341.0, 599.0], [340.0, 2749.0], [366.0, 3561.5], [365.0, 4013.0], [363.0, 4074.0], [358.0, 2155.0], [357.0, 4090.0], [354.0, 4211.0], [381.0, 4561.0], [378.0, 1843.25], [380.0, 688.5], [379.0, 589.0], [376.0, 1848.0], [375.0, 978.9999999999999], [374.0, 594.5], [373.0, 4556.5], [370.0, 1410.0], [368.0, 524.0], [399.0, 5200.0], [397.0, 4637.0], [396.0, 3834.6666666666665], [392.0, 4442.0], [390.0, 4275.0], [386.0, 2701.0], [414.0, 5133.0], [412.0, 4030.0], [411.0, 4287.0], [408.0, 4064.5], [405.0, 3711.0], [403.0, 852.0], [401.0, 3394.0], [428.0, 2905.25], [431.0, 4980.0], [430.0, 1997.0], [429.0, 3781.0], [427.0, 5069.0], [422.0, 1986.5], [420.0, 2604.6666666666665], [419.0, 1971.3333333333335], [418.0, 1432.5], [416.0, 2526.0], [421.0, 581.5], [446.0, 1917.0], [447.0, 3808.0], [445.0, 524.0], [444.0, 4651.0], [443.0, 536.0], [441.0, 2325.0], [440.0, 2051.0], [439.0, 2012.0], [432.0, 4131.0], [438.0, 2138.0], [437.0, 1243.0], [462.0, 3070.3333333333335], [457.0, 4114.0], [458.0, 3880.0], [461.0, 3556.4], [463.0, 2578.0], [460.0, 2729.0], [459.0, 4136.666666666667], [456.0, 2884.8], [455.0, 4431.0], [448.0, 4062.4285714285716], [450.0, 3517.0], [451.0, 4519.0], [449.0, 3523.0], [454.0, 2830.6666666666665], [453.0, 2023.6], [452.0, 3773.8235294117644], [464.0, 3907.6], [1.0, 17191.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[229.3850000000002, 1838.1049999999962]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 464.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6500.0, "minX": 1.65319674E12, "maxY": 13960.7, "series": [{"data": [[1.65319674E12, 13960.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65319674E12, 6500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65319674E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1838.1049999999962, "minX": 1.65319674E12, "maxY": 1838.1049999999962, "series": [{"data": [[1.65319674E12, 1838.1049999999962]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65319674E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1837.8199999999993, "minX": 1.65319674E12, "maxY": 1837.8199999999993, "series": [{"data": [[1.65319674E12, 1837.8199999999993]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65319674E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1195.858999999998, "minX": 1.65319674E12, "maxY": 1195.858999999998, "series": [{"data": [[1.65319674E12, 1195.858999999998]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65319674E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 437.0, "minX": 1.65319674E12, "maxY": 17191.0, "series": [{"data": [[1.65319674E12, 17191.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65319674E12, 4375.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65319674E12, 6618.090000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65319674E12, 5072.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65319674E12, 437.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65319674E12, 1017.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65319674E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 514.0, "minX": 1.0, "maxY": 11132.0, "series": [{"data": [[1.0, 11132.0], [147.0, 533.0], [5.0, 3082.0], [174.0, 644.5], [11.0, 1496.0], [205.0, 3686.0], [109.0, 514.0], [114.0, 1258.5], [233.0, 2430.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 514.0, "minX": 1.0, "maxY": 11132.0, "series": [{"data": [[1.0, 11132.0], [147.0, 533.0], [5.0, 3082.0], [174.0, 644.5], [11.0, 1496.0], [205.0, 3686.0], [109.0, 514.0], [114.0, 1258.5], [233.0, 2430.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.0166666666666666, "minX": 1.65319668E12, "maxY": 13.65, "series": [{"data": [[1.65319674E12, 13.65], [1.65319668E12, 3.0166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65319674E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65319674E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65319674E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65319674E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65319674E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65319674E12, 16.666666666666668]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65319674E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65319674E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65319674E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65319674E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

